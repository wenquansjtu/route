(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();class u{constructor(t){this.containerSelector=t,this.container=null,this.svg=null,this.simulation=null,this.nodes=[],this.links=[],this.layout="force",this.nodeSize=10,this.linkStrength=1,this.width=0,this.height=0,this.profSmootId=null,this.initialized=!1,this.initAttempts=0,this.maxInitAttempts=30}async loadD3(){return typeof d3<"u"?Promise.resolve():new Promise((t,e)=>{if(document.querySelector('script[src*="d3js.org"]')){setTimeout(()=>{typeof d3<"u"?t():e(new Error("D3.js failed to load"))},1e3);return}const i=document.createElement("script");i.src="https://d3js.org/d3.v7.min.js",i.onload=()=>{t()},i.onerror=n=>{e(n)},document.head.appendChild(i)})}async init(){this.initialized=!0,this.initAttempts++;const t=setTimeout(()=>{this.handleInitializationError("Initialization timed out")},1e4);if(this.container=document.querySelector(this.containerSelector),!this.container&&(clearTimeout(t),this.container=document.getElementById(this.containerSelector.replace("#","")),!this.container)){this.initAttempts<this.maxInitAttempts?setTimeout(()=>{this.init()},200):this.handleInitializationError("Maximum initialization attempts reached");return}if(this.container.style.display="block",this.container.style.visibility="visible",this.removeLoadingIndicator(),typeof d3>"u")try{await this.loadD3()}catch(s){clearTimeout(t),this.handleInitializationError("Failed to load D3.js: "+s.message);return}this.container.innerHTML="";const e=this.container.getBoundingClientRect();this.width=e.width||800,this.height=e.height||500,(this.width===0||this.height===0)&&(this.width=800,this.height=500);try{if(this.svg=d3.select(this.container).append("svg").attr("width","100%").attr("height","100%").attr("viewBox",`0 0 ${this.width} ${this.height}`).attr("preserveAspectRatio","xMidYMid meet").style("display","block"),this.svg.append("rect").attr("width","100%").attr("height","100%").attr("fill","rgba(0,0,0,0.2)"),this.svg.append("g").attr("class","links"),this.svg.append("g").attr("class","nodes"),this.initSimulation(),this.generateSampleData(),this.render(),clearTimeout(t),typeof CustomEvent<"u"&&typeof window<"u"){const s=new CustomEvent("networkVisualizerInitialized",{detail:{nodes:this.nodes.length,links:this.links.length}});window.dispatchEvent(s)}}catch(s){clearTimeout(t),this.handleInitializationError("Error during initialization: "+s.message)}}handleInitializationError(t){if(this.container||(this.container=document.querySelector(this.containerSelector)||document.getElementById(this.containerSelector.replace("#",""))),this.container){this.removeLoadingIndicator();const e=document.getElementById("network-viz-error"),s=document.getElementById("network-viz-error-message");if(e&&s){s.textContent=t,e.style.display="block";const i=this.container.querySelector("#network-viz-loading");i&&(i.style.display="none")}else this.container.innerHTML=`
                    <div style="display: flex; justify-content: center; align-items: center; height: 100%; color: #ef4444; font-size: 18px; text-align: center; padding: 20px;">
                        <div>
                            <div>‚ùå Network visualization failed to initialize</div>
                            <div style="font-size: 14px; margin-top: 10px;">${t}</div>
                            <button onclick="window.location.reload()" style="background: #0ea5e9; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-top: 15px;">Refresh Page</button>
                        </div>
                    </div>
                `}setTimeout(()=>{this.createFallbackVisualization()},500)}removeLoadingIndicator(){if(this.container){const t=this.container.querySelector("#network-viz-loading");t&&(t.style.display="none",setTimeout(()=>{t.parentNode===this.container&&this.container.removeChild(t)},100))}}initWhenReady(t=30,e=200){const s=i=>{const n=document.querySelector(this.containerSelector)||document.getElementById(this.containerSelector.replace("#",""));if(n){const o=n.getBoundingClientRect();if(o.width>0&&o.height>0){this.init();return}else n.style.display="block"}i>0?setTimeout(()=>s(i-1),e):this.handleInitializationError("Container not found or not visible after all retries")};s(t)}reinitialize(){this.svg=null,this.simulation=null,this.nodes=[],this.links=[],this.initialized=!1,this.initAttempts=0,this.container&&(this.container.innerHTML=""),this.container=document.querySelector(this.containerSelector)||document.getElementById(this.containerSelector.replace("#","")),this.container?(this.container.style.display="block",this.init()):this.initWhenReady(30,200)}initSimulation(){this.simulation=d3.forceSimulation().force("link",d3.forceLink().id(t=>t.id).strength(this.linkStrength)).force("charge",d3.forceManyBody().strength(-300)).force("center",d3.forceCenter(this.width/2,this.height/2)).force("collision",d3.forceCollide().radius(this.nodeSize+5)),this.simulation.on("tick",()=>{this.tick()})}tick(){if(!this.svg)return;this.svg.selectAll(".link").attr("x1",s=>(typeof s.source=="object"?s.source.x:0)||0).attr("y1",s=>(typeof s.source=="object"?s.source.y:0)||0).attr("x2",s=>(typeof s.target=="object"?s.target.x:0)||0).attr("y2",s=>(typeof s.target=="object"?s.target.y:0)||0),this.svg.selectAll(".node").attr("transform",s=>{const i=s.x||0,n=s.y||0;return`translate(${i},${n})`})}generateSampleData(){this.nodes=[{id:"agent1",name:"Prof. Smoot",type:"cosmic_structure_expert",status:"active",x:this.width*.3,y:this.height*.3,isProfSmoot:!0},{id:"agent2",name:"Dr. Analyzer",type:"analyzer",status:"processing",x:this.width*.7,y:this.height*.3},{id:"agent3",name:"Ms. Synthesizer",type:"synthesizer",status:"active",x:this.width*.5,y:this.height*.7},{id:"agent4",name:"Mr. Connector",type:"connector",status:"online",x:this.width*.2,y:this.height*.5},{id:"agent5",name:"Ms. Evaluator",type:"evaluator",status:"online",x:this.width*.8,y:this.height*.5}],this.links=[{source:"agent1",target:"agent2",strength:.8,type:"collaboration"},{source:"agent2",target:"agent3",strength:.6,type:"data_flow"},{source:"agent1",target:"agent3",strength:.4,type:"coordination"},{source:"agent3",target:"agent5",strength:.7,type:"collaboration"},{source:"agent4",target:"agent1",strength:.3,type:"coordination"}],this.convertLinkReferences()}convertLinkReferences(){!this.nodes||!this.links||(this.links=this.links.map(t=>{let e=t.source,s=t.target;return typeof t.source=="string"&&(e=this.nodes.find(i=>i.id===t.source)),typeof t.target=="string"&&(s=this.nodes.find(i=>i.id===t.target)),{...t,source:e||t.source,target:s||t.target}}))}setLayout(t){this.layout=t,this.updateLayout()}setNodeSize(t){this.nodeSize=parseInt(t),this.updateNodeSize()}setLinkStrength(t){this.linkStrength=parseFloat(t),this.simulation&&(this.simulation.force("link").strength(this.linkStrength),this.simulation.alpha(.3).restart())}updateLayout(){switch(this.layout){case"force":this.applyForceLayout();break;case"circular":this.applyCircularLayout();break;case"hierarchical":this.applyHierarchicalLayout();break;default:this.applyForceLayout()}}applyForceLayout(){this.simulation&&this.simulation.force("center",d3.forceCenter(this.width/2,this.height/2)).force("charge",d3.forceManyBody().strength(-300)).alpha(.5).restart()}applyCircularLayout(){const t=this.width/2,e=this.height/2,s=Math.min(this.width,this.height)*.3;this.nodes.forEach((i,n)=>{const o=n/this.nodes.length*2*Math.PI;i.fx=t+s*Math.cos(o),i.fy=e+s*Math.sin(o)}),this.simulation&&this.simulation.alpha(.3).restart()}applyHierarchicalLayout(){const e=Math.ceil(this.nodes.length/3);this.nodes.forEach((s,i)=>{const n=Math.floor(i/e),o=i%e,a=this.width*.8,r=this.height/(3+1);s.fx=(this.width-a)/2+a/(e+1)*(o+1),s.fy=r*(n+1)}),this.simulation&&this.simulation.alpha(.3).restart()}updateNodeSize(){this.svg&&this.svg.selectAll(".node circle").attr("r",this.nodeSize),this.simulation&&(this.simulation.force("collision").radius(this.nodeSize+5),this.simulation.alpha(.1).restart())}render(){if(!(!this.nodes||!this.links)){if(!this.svg){this.init();return}this.svg.style("display","block"),this.svg.style("visibility","visible"),this.container&&(this.container.style.display="block",this.container.style.visibility="visible"),this.renderLinks(),this.renderNodes(),this.simulation&&this.nodes.length>0&&this.links.length>0&&(this.convertLinkReferences(),this.simulation.nodes(this.nodes),this.simulation.force("link").links(this.links),this.hasSavedTopologyDisplayed()||this.simulation.alpha(.3).restart())}}renderNodes(){if(!this.svg)return;const t=this.svg.select(".nodes").selectAll(".node").data(this.nodes,i=>i.id);t.exit().remove();const e=t.enter().append("g").attr("class","node").call(this.drag(this.simulation));e.append("circle").attr("r",this.nodeSize).attr("fill",i=>this.getNodeColor(i)).attr("stroke",i=>this.getNodeStroke(i)).attr("stroke-width",i=>i.isProfSmoot?3:1.5).attr("class",i=>i.isProfSmoot?"prof-smoot-node":""),e.append("text").attr("x",0).attr("y",i=>this.nodeSize+15).attr("text-anchor","middle").attr("class","node-label").text(i=>this.getNodeLabel(i)),e.filter(i=>i.isProfSmoot).append("text").attr("x",0).attr("y",5).attr("text-anchor","middle").attr("class","node-icon").text("üåå");const s=e.merge(t);s.select("circle").attr("fill",i=>this.getNodeColor(i)).attr("stroke",i=>this.getNodeStroke(i)).attr("stroke-width",i=>i.isProfSmoot?3:1.5),s.select(".node-label").text(i=>this.getNodeLabel(i))}renderLinks(){if(!this.svg)return;const t=this.svg.select(".links").selectAll(".link").data(this.links,i=>{const n=typeof i.source=="string"?i.source:i.source.id,o=typeof i.target=="string"?i.target:i.target.id;return`${n}-${o}`});t.exit().remove(),t.enter().append("line").attr("class","link").attr("stroke",i=>this.getLinkColor(i)).attr("stroke-width",i=>this.getLinkWidth(i)).attr("stroke-opacity",.6).merge(t).attr("stroke",i=>this.getLinkColor(i)).attr("stroke-width",i=>this.getLinkWidth(i))}getNodeColor(t){return t.isProfSmoot?"#9333ea":t.group==="agent"?{analyzer:"#3b82f6",reasoner:"#10b981",synthesizer:"#f59e0b",validator:"#ef4444",innovator:"#8b5cf6",cosmic_structure_expert:"#9333ea"}[t.type]||"#60a5fa":"#94a3b8"}getNodeStroke(t){return t.isProfSmoot?"#ffffff":t.status==="completed"?"#10b981":t.status==="busy"?"#f59e0b":t.status==="offline"?"#ef4444":"#ffffff"}getNodeLabel(t){return t.name?t.name.length>12?t.name.substring(0,12)+"...":t.name:t.id.substring(0,8)}getLinkColor(t){return{execution:"#60a5fa",sequence:"#10b981",collaboration:"#8b5cf6",data_flow:"#f59e0b"}[t.type]||"#94a3b8"}getLinkWidth(t){return t.type==="sequence"?2:t.type==="execution"?3:1.5}drag(t){function e(n,o){n.active||t.alphaTarget(.3).restart(),o.fx=o.x,o.fy=o.y}function s(n,o){o.fx=n.x,o.fy=n.y}function i(n,o){n.active||t.alphaTarget(0),o.fx=null,o.fy=null}return d3.drag().on("start",e).on("drag",s).on("end",i)}update(t){if(!(this.hasSavedTopologyDisplayed()&&!this._forceLiveUpdate)){if(this._forceLiveUpdate=!1,!this.initialized||!this.svg){this.initWhenReady(20,200),setTimeout(()=>{this._performUpdate(t)},800);return}this._performUpdate(t)}}_performUpdate(t){if(!this.svg){this.init();return}this.svg.style("display","block"),this.svg.style("visibility","visible"),this.container&&(this.container.style.display="block",this.container.style.visibility="visible"),t&&t.agents&&t.agents.size>0?this.updateNodesFromAgents(t.agents):this.generateSampleData(),t&&t.topology&&t.topology.connections?this.updateLinksFromTopology(t.topology):this.links.length===0&&this.generateSampleData(),this.convertLinkReferences(),this.simulation&&(this.simulation.nodes(this.nodes),this.simulation.force("link").links(this.links),this.simulation.alpha(.3).restart()),this.render(),this.svg&&(this.svg.style("display","block"),this.svg.style("visibility","visible"))}updateWithTaskChain(t){if(!this.initialized||!this.svg){this.initWhenReady(10,100),setTimeout(()=>{this._performUpdateWithTaskChain(t)},500);return}this._performUpdateWithTaskChain(t)}_performUpdateWithTaskChain(t){!t||!t.executionPath||(this.convertTaskChainToNetwork(t.executionPath),this.render(),this.savedTopologies||(this.savedTopologies=new Map),this.savedTopologies.set(t.id,{nodes:[...this.nodes],links:[...this.links],timestamp:Date.now(),taskInfo:{id:t.id,metrics:t.metrics||{}}}))}convertTaskChainToNetwork(t){const e=new Map,s=new Map;t.forEach((i,n)=>{if(!e.has(i.agentId)){const a=i.agentDetails&&i.agentDetails.length>0?i.agentDetails.find(r=>r.id===i.agentId):null;e.set(i.agentId,{id:i.agentId,name:a?a.name:`Agent-${i.agentId.substring(0,8)}`,type:a?a.type:"agent",status:"completed",x:Math.random()*this.width,y:Math.random()*this.height,group:"agent",isProfSmoot:a?a.name==="Prof. Smoot":!1})}const o=i.taskId||`task_${n}`;s.has(o)||s.set(o,{id:o,name:i.taskName||`Task-${o.substring(0,8)}`,type:"task",status:"completed",x:Math.random()*this.width,y:Math.random()*this.height,group:"task"})}),this.nodes=[...e.values(),...s.values()],this.links=t.map(i=>{const n=i.taskId||`task_${t.indexOf(i)}`;return{source:i.agentId,target:n,type:"execution",timestamp:i.timestamp,heatLevel:i.heatLevel||.5}});for(let i=0;i<t.length-1;i++){const n=t[i].taskId||`task_${i}`,o=t[i+1].taskId||`task_${i+1}`;this.links.push({source:n,target:o,type:"sequence",timestamp:t[i].timestamp})}this.convertLinkReferences()}displaySavedTopology(t){if(!this.savedTopologies)return!1;const e=this.savedTopologies.get(t);return e?(this.nodes=e.nodes.map(s=>({...s})),this.links=e.links.map(s=>({...s})),this.convertLinkReferences(),this.render(),!0):!1}getSavedTopologies(){return this.savedTopologies?Array.from(this.savedTopologies.entries()).map(([t,e])=>({id:t,timestamp:e.timestamp,taskInfo:e.taskInfo})):[]}clearSavedTopologies(){this.savedTopologies&&this.savedTopologies.clear()}hasSavedTopologyDisplayed(){if(!this.savedTopologies||this.savedTopologies.size===0)return!1;if(this.nodes&&this.nodes.length>0){const t=this.nodes.some(i=>i.group==="task"),e=this.nodes.some(i=>i.group==="agent");return t&&e}return!1}clearCurrentVisualization(){this.simulation&&this.simulation.stop(),this.svg&&this.svg.selectAll("*").remove(),this.generateSampleData(),this.render(),this.simulation&&this.simulation.alpha(.3).restart()}refreshLiveView(){this._forceLiveUpdate=!0,this.clearCurrentVisualization(),window.cosmicApp&&window.cosmicApp.fetchRealAIAgents()}updateNodesFromAgents(t){this.nodes=Array.from(t.values()).map(e=>({id:e.id,name:e.name||e.id,type:e.type||"unknown",status:e.status||"online",x:e.position?e.position.x*this.width:Math.random()*this.width,y:e.position?e.position.y*this.height:Math.random()*this.height}))}updateLinksFromTopology(t){t.connections&&(this.links=t.connections.map(e=>({source:e.source,target:e.target,strength:e.strength||.5,type:e.type||"collaboration"})))}updateTopology(t){if(!this.initialized||!this.svg){this.initWhenReady(10,100),setTimeout(()=>{this._performUpdateTopology(t)},500);return}this._performUpdateTopology(t)}_performUpdateTopology(t){t&&(t.nodes?this.updateNodesFromAgents(new Map(t.nodes.map(e=>[e.id,e]))):t.agents&&this.updateNodesFromAgents(new Map(t.agents.map(e=>[e.id,e]))),t.edges?this.links=t.edges.map(e=>({source:e.source,target:e.target,strength:e.weight||.5,type:e.type||"collaboration"})):t.connections&&(this.links=t.connections.map(e=>({source:e.source,target:e.target,strength:e.strength||.5,type:e.type||"collaboration"}))),this.convertLinkReferences(),this.render())}highlightExecutionStep(t){this.svg&&(this.svg.selectAll(".node").filter(e=>e.id===t.agentId).select("circle").attr("stroke","#ffeb3b").attr("stroke-width",4),this.svg.selectAll(".node").filter(e=>e.id===t.taskId).select("circle").attr("stroke","#ffeb3b").attr("stroke-width",4),this.svg.selectAll(".link").filter(e=>e.source.id===t.agentId&&e.target.id===t.taskId).attr("stroke","#ffeb3b").attr("stroke-width",3))}updateWithAgents(t){if(!this.initialized||!this.svg){this.initWhenReady(10,100),setTimeout(()=>{this._performUpdateWithAgents(t)},500);return}this._performUpdateWithAgents(t)}_performUpdateWithAgents(t){this.updateNodesFromAgents(new Map(t.map(e=>[e.id,e]))),this.generateSampleLinks(),this.render()}generateSampleLinks(){if(!this.nodes||this.nodes.length===0){this.links=[];return}this.links=[];for(let t=0;t<this.nodes.length;t++){const e=this.nodes[t],s=this.nodes[(t+1)%this.nodes.length];this.links.push({source:e,target:s,strength:.5+Math.random()*.5,type:["collaboration","coordination","data_flow"][Math.floor(Math.random()*3)]})}if(this.nodes.length>2){for(let t=0;t<this.nodes.length;t++)if(Math.random()>.7){const e=t;let s;do s=Math.floor(Math.random()*this.nodes.length);while(s===e);this.links.push({source:this.nodes[e],target:this.nodes[s],strength:.3+Math.random()*.4,type:["execution","sequence"][Math.floor(Math.random()*2)]})}}}updateAgent(t){if(!this.initialized||!this.svg){this.initWhenReady(10,100),setTimeout(()=>{this._performUpdateAgent(t)},500);return}this._performUpdateAgent(t)}_performUpdateAgent(t){window.cosmicApp&&window.cosmicApp.systemState&&window.cosmicApp.systemState.agents&&window.cosmicApp.systemState.agents.set(t.id,t),this.update(window.cosmicApp?window.cosmicApp.systemState:null)}resize(){if(!(!this.container&&(this.container=document.querySelector(this.containerSelector)||document.getElementById(this.containerSelector.replace("#","")),!this.container)))try{const t=this.container.getBoundingClientRect();if(this.width=t.width||800,this.height=t.height||400,(this.width===0||this.height===0)&&(this.width=800,this.height=400),!this.svg){this.init();return}this.svg&&this.svg.attr("viewBox",`0 0 ${this.width} ${this.height}`),this.simulation&&(this.simulation.force("center",d3.forceCenter(this.width/2,this.height/2)),this.simulation.alpha(.3).restart())}catch{this.init()}}isProperlySetUp(){return!!(this.container&&this.svg&&this.simulation&&this.nodes.length>0&&this.links.length>0)}forceRender(){if(this.container&&(this.container.style.display="block",this.removeLoadingIndicator()),!this.initialized||!this.svg){this.initWhenReady(20,200);return}this.svg&&this.svg.style("display",null),this.render(),this.simulation&&this.simulation.alpha(.5).restart()}checkAndInitialize(){return(document.querySelector(this.containerSelector)||document.getElementById(this.containerSelector.replace("#","")))&&!this.initialized?(this.initWhenReady(10,100),!0):!1}manualInit(){this.initAttempts=0,this.reinitialize()}createFallbackVisualization(){try{if(this.container=document.querySelector(this.containerSelector),this.container||(this.container=document.getElementById(this.containerSelector.replace("#",""))),!this.container){this.handleInitializationError("Container not found for fallback visualization");return}this.removeLoadingIndicator(),this.container.innerHTML="";const t=this.container.getBoundingClientRect();this.width=t.width||800,this.height=t.height||500,this.svg=d3.select(this.container).append("svg").attr("width","100%").attr("height","100%").attr("viewBox",`0 0 ${this.width} ${this.height}`).attr("preserveAspectRatio","xMidYMid meet").style("display","block"),this.svg.append("rect").attr("width","100%").attr("height","100%").attr("fill","rgba(0,0,0,0.2)");const e=[{id:"agent1",x:this.width*.3,y:this.height*.3,name:"Prof. Smoot"},{id:"agent2",x:this.width*.7,y:this.height*.3,name:"Dr. Analyzer"},{id:"agent3",x:this.width*.5,y:this.height*.7,name:"Ms. Synthesizer"}],s=[{source:e[0],target:e[1]},{source:e[1],target:e[2]},{source:e[0],target:e[2]}];this.svg.append("g").selectAll("line").data(s).enter().append("line").attr("x1",n=>n.source.x).attr("y1",n=>n.source.y).attr("x2",n=>n.target.x).attr("y2",n=>n.target.y).attr("stroke","#94a3b8").attr("stroke-width",2);const i=this.svg.append("g").selectAll("g").data(e).enter().append("g").attr("transform",n=>`translate(${n.x},${n.y})`);i.append("circle").attr("r",20).attr("fill",(n,o)=>["#9333ea","#3b82f6","#f59e0b"][o]).attr("stroke","#ffffff").attr("stroke-width",2),i.append("text").attr("text-anchor","middle").attr("dy",30).attr("fill","#ffffff").attr("font-size","12px").text(n=>n.name)}catch(t){this.handleInitializationError("Error creating fallback visualization: "+t.message)}}}class p{constructor(t){this.container=document.querySelector(t),this.canvas=null,this.ctx=null,this.width=0,this.height=0,this.fieldData=null,this.agents=[],this.forceVectors=[],this.cooperationWaves=[],this.resonanceZones=[],this.animationId=null,this.time=0,this.scale=1,this.offsetX=0,this.offsetY=0}init(){if(!this.container)return;this.container.innerHTML="";const t=this.container.getBoundingClientRect();this.width=t.width,this.height=t.height,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height,this.canvas.style.width="100%",this.canvas.style.height="100%",this.container.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.generateSampleData(),this.startAnimation()}generateSampleData(){this.agents=[{id:"agent1",position:{x:this.width*.3,y:this.height*.3},energy:80,radius:15,color:"#64b5f6"},{id:"agent2",position:{x:this.width*.7,y:this.height*.3},energy:90,radius:18,color:"#4fc3f7"},{id:"agent3",position:{x:this.width*.5,y:this.height*.7},energy:70,radius:12,color:"#4dd0e1"}],this.forceVectors=[{agentId:"agent1",vector:{x:20,y:10},magnitude:.8},{agentId:"agent2",vector:{x:-15,y:25},magnitude:.6},{agentId:"agent3",vector:{x:5,y:-20},magnitude:.7}],this.cooperationWaves=[{center:{x:this.width*.5,y:this.height*.5},radius:50,maxRadius:100,amplitude:.8,frequency:2,startTime:Date.now()}],this.resonanceZones=[{center:{x:this.width*.4,y:this.height*.4},radius:60,strength:.9,agents:["agent1","agent2"]}]}startAnimation(){const t=()=>{this.time+=.016,this.render(),this.animationId=requestAnimationFrame(t)};t()}stopAnimation(){this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null)}render(){this.ctx.clearRect(0,0,this.width,this.height),this.ctx.fillStyle="rgba(0, 0, 0, 0.1)",this.ctx.fillRect(0,0,this.width,this.height),this.renderFieldGrid(),this.renderResonanceZones(),this.renderCooperationWaves(),this.renderAgents(),this.renderForceVectors(),this.renderInfoOverlay()}renderFieldGrid(){const e=Math.ceil(this.height/20),s=Math.ceil(this.width/20);this.ctx.strokeStyle="rgba(100, 181, 246, 0.1)",this.ctx.lineWidth=.5,this.ctx.beginPath();for(let i=0;i<=s;i++){const n=i*20;this.ctx.moveTo(n,0),this.ctx.lineTo(n,this.height)}for(let i=0;i<=e;i++){const n=i*20;this.ctx.moveTo(0,n),this.ctx.lineTo(this.width,n)}this.ctx.stroke();for(let i=0;i<s;i+=2)for(let n=0;n<e;n+=2){const o=i*20,a=n*20,r=this.calculateFieldStrengthAt(o,a);r>.1&&(this.ctx.fillStyle=`rgba(100, 181, 246, ${Math.min(r,.8)})`,this.ctx.beginPath(),this.ctx.arc(o,a,2,0,Math.PI*2),this.ctx.fill())}}calculateFieldStrengthAt(t,e){let s=0;for(const i of this.agents){const n=t-i.position.x,o=e-i.position.y,a=Math.sqrt(n*n+o*o);if(a>0){const r=i.energy/100/(1+a*.01);s+=r}}return Math.min(s,1)}renderResonanceZones(){for(const t of this.resonanceZones){const e=.1*Math.sin(this.time*3),s=t.radius*(1+e),i=this.ctx.createRadialGradient(t.center.x,t.center.y,0,t.center.x,t.center.y,s);i.addColorStop(0,`rgba(76, 175, 80, ${t.strength*.3})`),i.addColorStop(1,"rgba(76, 175, 80, 0)"),this.ctx.fillStyle=i,this.ctx.beginPath(),this.ctx.arc(t.center.x,t.center.y,s,0,Math.PI*2),this.ctx.fill(),this.ctx.strokeStyle=`rgba(76, 175, 80, ${t.strength*.6})`,this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]),this.ctx.beginPath(),this.ctx.arc(t.center.x,t.center.y,s,0,Math.PI*2),this.ctx.stroke(),this.ctx.setLineDash([])}}renderCooperationWaves(){const t=Date.now();for(const e of this.cooperationWaves){const i=(t-e.startTime)/1e3*e.frequency;if(i>0&&i<5){const n=e.radius+i*20,o=Math.max(0,e.amplitude*(1-i/5));this.ctx.strokeStyle=`rgba(255, 193, 7, ${o})`,this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.arc(e.center.x,e.center.y,n,0,Math.PI*2),this.ctx.stroke(),n>20&&(this.ctx.strokeStyle=`rgba(255, 193, 7, ${o*.5})`,this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.arc(e.center.x,e.center.y,n-20,0,Math.PI*2),this.ctx.stroke())}}}renderAgents(){for(const t of this.agents){const e=.1*Math.sin(this.time*2+t.position.x*.01),s=t.radius*(1+e),i=this.ctx.createRadialGradient(t.position.x,t.position.y,0,t.position.x,t.position.y,s*2);i.addColorStop(0,t.color+"40"),i.addColorStop(1,t.color+"00"),this.ctx.fillStyle=i,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,s*2,0,Math.PI*2),this.ctx.fill(),this.ctx.fillStyle=t.color,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,s,0,Math.PI*2),this.ctx.fill(),this.ctx.strokeStyle="#ffffff",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,s,0,Math.PI*2),this.ctx.stroke();const n=t.energy/100*Math.PI*2;this.ctx.strokeStyle="#4caf50",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.arc(t.position.x,t.position.y,s+5,-Math.PI/2,-Math.PI/2+n),this.ctx.stroke()}}renderForceVectors(){for(const t of this.forceVectors){const e=this.agents.find(l=>l.id===t.agentId);if(!e)continue;const s=e.position.x,i=e.position.y,n=s+t.vector.x*t.magnitude*2,o=i+t.vector.y*t.magnitude*2;this.ctx.strokeStyle=`rgba(255, 87, 34, ${t.magnitude})`,this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.moveTo(s,i),this.ctx.lineTo(n,o),this.ctx.stroke();const a=Math.atan2(o-i,n-s),r=10;this.ctx.beginPath(),this.ctx.moveTo(n,o),this.ctx.lineTo(n-r*Math.cos(a-Math.PI/6),o-r*Math.sin(a-Math.PI/6)),this.ctx.moveTo(n,o),this.ctx.lineTo(n-r*Math.cos(a+Math.PI/6),o-r*Math.sin(a+Math.PI/6)),this.ctx.stroke()}}renderInfoOverlay(){this.ctx.fillStyle="rgba(0, 0, 0, 0.7)",this.ctx.fillRect(10,10,200,120),this.ctx.fillStyle="#ffffff",this.ctx.font="12px Arial",this.ctx.fillText("Âº†ÈáèÂçè‰ΩúÂäõÂú∫",20,30),[{color:"#64b5f6",text:"AgentËäÇÁÇπ"},{color:"#4caf50",text:"ÂÖ±ÊåØÂå∫Âüü"},{color:"#ffc107",text:"Âçè‰ΩúÊ≥¢Âä®"},{color:"#ff5722",text:"ÂäõÂêëÈáè"}].forEach((e,s)=>{const i=50+s*20;this.ctx.fillStyle=e.color,this.ctx.fillRect(20,i-8,12,12),this.ctx.fillStyle="#ffffff",this.ctx.fillText(e.text,40,i)})}update(t){t.agents&&this.updateAgentsFromSystem(t.agents),t.tcf&&this.updateTCFFromSystem(t.tcf)}updateAgentsFromSystem(t){this.agents=Array.from(t.values()).map(e=>{var s,i;return{id:e.id,position:{x:(((s=e.position)==null?void 0:s.x)||0)*.1+this.width*.5,y:(((i=e.position)==null?void 0:i.y)||0)*.1+this.height*.5},energy:e.energy||50,radius:Math.max(10,(e.energy||50)*.2),color:this.getAgentColor(e.type)}})}updateTCFFromSystem(t){t.forceVectors&&(this.forceVectors=t.forceVectors),t.cooperationWaves&&(this.cooperationWaves=t.cooperationWaves),t.resonanceZones&&(this.resonanceZones=t.resonanceZones)}updateField(t){this.fieldData=t,t.agents&&this.updateAgentsFromSystem(new Map(t.agents.map(e=>[e.id,e]))),t.tcf&&this.updateTCFFromSystem(t.tcf)}getAgentColor(t){return{analysis:"#64b5f6",processing:"#4fc3f7",reasoning:"#4dd0e1",coordination:"#4db6ac",visualization:"#81c784"}[t]||"#90a4ae"}destroy(){this.stopAnimation(),this.container&&(this.container.innerHTML="")}}class g{constructor(t){this.container=document.querySelector(t),this.svg=null,this.simulation=null,this.nodes=[],this.links=[],this.taskChainData=null,this.width=0,this.height=0}init(){if(console.log("TaskChainVisualizer init() called"),!this.container){console.error("Container not found for TaskChainVisualizer");return}if(typeof d3>"u"){console.error("D3.js is not loaded!");return}console.log("Container found:",this.container),this.container.innerHTML="";const t=this.container.getBoundingClientRect();this.width=t.width||800,this.height=t.height||400,(this.width===0||this.height===0)&&(this.width=800,this.height=400,console.log("Container has zero dimensions, using default size:",this.width,"x",this.height)),console.log("Container dimensions:",this.width,"x",this.height),this.svg=d3.select(this.container).append("svg").attr("width","100%").attr("height","100%").attr("viewBox",`0 0 ${this.width} ${this.height}`),this.svg.append("rect").attr("width","100%").attr("height","100%").attr("fill","rgba(0,0,0,0.2)"),this.svg.append("g").attr("class","links"),this.svg.append("g").attr("class","nodes"),this.initSimulation(),console.log("‚úÖ TaskChainVisualizer initialized successfully")}initSimulation(){this.simulation=d3.forceSimulation().force("link",d3.forceLink().id(t=>t.id).strength(1)).force("charge",d3.forceManyBody().strength(-300)).force("center",d3.forceCenter(this.width/2,this.height/2)).force("collision",d3.forceCollide().radius(20)),this.simulation.on("tick",()=>{this.tick()})}tick(){this.svg.selectAll(".link").attr("x1",t=>t.source.x).attr("y1",t=>t.source.y).attr("x2",t=>t.target.x).attr("y2",t=>t.target.y),this.svg.selectAll(".node").attr("transform",t=>`translate(${t.x},${t.y})`)}updateTaskChain(t){if(console.log("Updating task chain visualization:",t),!t||!t.executionPath){console.warn("No task chain data or execution path provided");return}this.taskChainData=t,this.convertExecutionPathToGraph(t.executionPath),this.render()}convertExecutionPathToGraph(t){const e=new Map,s=new Map;t.forEach((i,n)=>{e.has(i.agentId)||e.set(i.agentId,{id:i.agentId,name:`Agent-${i.agentId.substring(0,8)}`,type:"agent",status:"completed",x:Math.random()*this.width,y:Math.random()*this.height,group:"agent"});const o=i.taskId;s.has(o)||s.set(o,{id:o,name:`Task-${o.substring(0,8)}`,type:"task",status:"completed",x:Math.random()*this.width,y:Math.random()*this.height,group:"task"})}),this.nodes=[...e.values(),...s.values()],this.links=t.map(i=>({source:i.agentId,target:i.taskId,type:"execution",timestamp:i.timestamp,heatLevel:i.heatLevel||.5}));for(let i=0;i<t.length-1;i++)this.links.push({source:t[i].taskId,target:t[i+1].taskId,type:"sequence",timestamp:t[i].timestamp});console.log("Converted execution path to graph:",{nodes:this.nodes.length,links:this.links.length})}render(){if(!this.svg){console.error("SVG not initialized");return}this.renderLinks(),this.renderNodes(),this.simulation&&(this.simulation.nodes(this.nodes),this.simulation.force("link").links(this.links),this.simulation.alpha(.3).restart())}renderNodes(){const t=this.svg.select(".nodes").selectAll(".node").data(this.nodes,i=>i.id);t.exit().remove();const e=t.enter().append("g").attr("class","node").call(this.drag(this.simulation));e.append("circle").attr("r",i=>this.getNodeSize(i)).attr("fill",i=>this.getNodeColor(i)).attr("stroke",i=>this.getNodeStroke(i)).attr("stroke-width",2),e.append("text").attr("x",0).attr("y",5).attr("text-anchor","middle").attr("class","node-icon").text(i=>this.getNodeIcon(i)),e.append("text").attr("x",0).attr("y",i=>this.getNodeSize(i)+15).attr("text-anchor","middle").attr("class","node-label").text(i=>this.getNodeLabel(i));const s=e.merge(t);s.select("circle").attr("fill",i=>this.getNodeColor(i)).attr("stroke",i=>this.getNodeStroke(i)),s.select(".node-icon").text(i=>this.getNodeIcon(i)),s.select(".node-label").text(i=>this.getNodeLabel(i))}renderLinks(){const t=this.svg.select(".links").selectAll(".link").data(this.links,i=>`${i.source.id||i.source}-${i.target.id||i.target}`);t.exit().remove(),t.enter().append("line").attr("class","link").attr("stroke",i=>this.getLinkColor(i)).attr("stroke-width",i=>this.getLinkWidth(i)).attr("stroke-opacity",.7).merge(t).attr("stroke",i=>this.getLinkColor(i)).attr("stroke-width",i=>this.getLinkWidth(i))}getNodeIcon(t){return t.type==="agent"?t.isProfSmoot?"üåå":"ü§ñ":t.type==="task"?"üìã":"‚óè"}getNodeSize(t){return t.type==="agent"?20:t.type==="task"?15:10}getNodeColor(t){return t.isProfSmoot?"#9333ea":t.type==="agent"?{analyzer:"#3b82f6",reasoner:"#10b981",synthesizer:"#f59e0b",validator:"#ef4444",innovator:"#8b5cf6",cosmic_structure_expert:"#9333ea"}[t.type]||"#60a5fa":t.type==="task"?"#94a3b8":"#60a5fa"}getNodeStroke(t){return t.status==="completed"?"#10b981":t.status==="busy"?"#f59e0b":t.status==="offline"?"#ef4444":"#ffffff"}getNodeLabel(t){return t.name?t.name.length>15?t.name.substring(0,15)+"...":t.name:t.id.substring(0,8)}getLinkColor(t){return{execution:"#60a5fa",sequence:"#10b981"}[t.type]||"#94a3b8"}getLinkWidth(t){return t.type==="sequence"?3:t.type==="execution"?2:1.5}drag(t){function e(n,o){n.active||t.alphaTarget(.3).restart(),o.fx=o.x,o.fy=o.y}function s(n,o){o.fx=n.x,o.fy=n.y}function i(n,o){n.active||t.alphaTarget(0),o.fx=null,o.fy=null}return d3.drag().on("start",e).on("drag",s).on("end",i)}convertExecutionPathToGraph(t){const e=new Map,s=new Map;t.forEach((i,n)=>{e.has(i.agentId)||e.set(i.agentId,{id:i.agentId,name:`Agent-${i.agentId.substring(0,8)}`,type:"agent",status:"completed",x:Math.random()*this.width,y:Math.random()*this.height,group:"agent"});const o=i.taskId;s.has(o)||s.set(o,{id:o,name:i.taskName||`Task-${o.substring(0,8)}`,type:"task",status:"completed",x:Math.random()*this.width,y:Math.random()*this.height,group:"task"})}),this.nodes=[...e.values(),...s.values()],this.links=t.map(i=>({source:i.agentId,target:i.taskId,type:"execution",timestamp:i.timestamp,heatLevel:i.heatLevel||.5}));for(let i=0;i<t.length-1;i++)this.links.push({source:t[i].taskId,target:t[i+1].taskId,type:"sequence",timestamp:t[i].timestamp});console.log("Converted execution path to graph:",{nodes:this.nodes.length,links:this.links.length})}clear(){console.log("Clearing task chain visualization"),this.nodes=[],this.links=[],this.taskChainData=null,this.svg&&(this.svg.select(".nodes").selectAll("*").remove(),this.svg.select(".links").selectAll("*").remove()),this.simulation&&this.simulation.stop()}refresh(){this.taskChainData&&this.updateTaskChain(this.taskChainData)}}class y{constructor(){this.container=null}init(){console.log("Âçè‰ΩúÁõëÊéßÁªÑ‰ª∂Â∑≤ÂàùÂßãÂåñ")}update(t){var e;this.updateCollaborationSessions(t.collaborationSessions),this.updateConvergenceChart(t.convergenceState),this.updateAgentPerformance(t.agents),this.updateResonanceZones((e=t.tcf)==null?void 0:e.resonanceZones)}updateCollaborationSessions(t){const e=document.getElementById("collaboration-sessions");if(!e||!t)return;e.innerHTML="";const s=Array.from(t.values()).filter(i=>i.status==="active");if(s.length===0){e.innerHTML='<p class="text-muted">ÊöÇÊó†Ê¥ªË∑ÉÂçè‰Ωú‰ºöËØù</p>';return}s.forEach(i=>{var o;const n=document.createElement("div");n.className="session-item",n.innerHTML=`
                <div class="session-header">
                    <span class="session-id">${i.id.slice(0,8)}</span>
                    <span class="session-status">${i.strategy}</span>
                </div>
                <div class="session-participants">
                    ÂèÇ‰∏éËÄÖ: ${i.participants.size}‰∏™Agent
                </div>
                <div class="session-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${(((o=i.convergenceTracker)==null?void 0:o.consensus)||0)*100}%"></div>
                    </div>
                </div>
            `,e.appendChild(n)})}updateConvergenceChart(t){const e=document.getElementById("convergence-chart");if(e){if(!t){e.innerHTML='<p class="text-muted">ÊöÇÊó†Êî∂ÊïõÊï∞ÊçÆ</p>';return}e.innerHTML=`
            <div class="convergence-metrics">
                <div class="metric-item">
                    <span class="metric-label">ÂÖ®Â±ÄÂÖ±ËØÜÂ∫¶</span>
                    <span class="metric-value">${(t.globalConsensus*100).toFixed(1)}%</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">‰ªªÂä°ÂÆåÊàêÁéá</span>
                    <span class="metric-value">${(t.taskCompletionRate*100).toFixed(1)}%</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">Âçè‰ΩúÊïàÁéá</span>
                    <span class="metric-value">${(t.collaborationEfficiency*100).toFixed(1)}%</span>
                </div>
                <div class="metric-item">
                    <span class="metric-label">ÁΩëÁªúÁ®≥ÂÆöÊÄß</span>
                    <span class="metric-value">${(t.networkStability*100).toFixed(1)}%</span>
                </div>
            </div>
        `}}updateAgentPerformance(t){const e=document.getElementById("agent-performance");if(!e||!t)return;e.innerHTML="";const s=Array.from(t.values()).sort((i,n)=>(n.performanceScore||0)-(i.performanceScore||0)).slice(0,5);if(s.length===0){e.innerHTML='<p class="text-muted">ÊöÇÊó†AgentÊï∞ÊçÆ</p>';return}s.forEach(i=>{const n=document.createElement("div");n.className="agent-performance-item",n.innerHTML=`
                <div class="agent-name">${i.name||i.id.slice(0,8)}</div>
                <div class="agent-score">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${(i.performanceScore||0)*100}%"></div>
                    </div>
                    <span class="score-text">${((i.performanceScore||0)*100).toFixed(1)}%</span>
                </div>
            `,e.appendChild(n)})}updateResonanceZones(t){const e=document.getElementById("resonance-zones");if(e){if(!t||t.length===0){e.innerHTML='<p class="text-muted">ÊöÇÊó†ÂÖ±ÊåØÂå∫Âüü</p>';return}e.innerHTML="",t.forEach((s,i)=>{var o;const n=document.createElement("div");n.className="resonance-zone-item",n.innerHTML=`
                <div class="zone-header">
                    <span class="zone-id">Âå∫Âüü ${i+1}</span>
                    <span class="zone-strength">${(s.strength*100).toFixed(0)}%</span>
                </div>
                <div class="zone-agents">
                    Ê∂âÂèäAgent: ${((o=s.agents)==null?void 0:o.length)||0}‰∏™
                </div>
                <div class="zone-coherence">
                    Áõ∏Âπ≤ÊÄß: ${(s.coherence*100).toFixed(1)}%
                </div>
            `,e.appendChild(n)})}}}class f{constructor(){this.container=null}init(){console.log("‰ªªÂä°ÁÆ°ÁêÜÁªÑ‰ª∂Â∑≤ÂàùÂßãÂåñ")}update(t){this.updateTaskQueue(t.tasks),this.updateExecutingTasks(t.tasks),this.updateCompletedTasks(t.tasks),this.updateTaskChains(t.taskChains)}updateTaskQueue(t){const e=document.getElementById("task-queue");if(!e||!t)return;const s=Array.from(t.values()).filter(i=>i.status==="pending").sort((i,n)=>(n.priority||0)-(i.priority||0));this.renderTaskList(e,s,"ÊöÇÊó†Á≠âÂæÖ‰ªªÂä°")}updateExecutingTasks(t){const e=document.getElementById("executing-tasks");if(!e||!t)return;const s=Array.from(t.values()).filter(i=>i.status==="executing");this.renderTaskList(e,s,"ÊöÇÊó†ÊâßË°å‰∏≠‰ªªÂä°")}updateCompletedTasks(t){const e=document.getElementById("completed-tasks");if(!e||!t)return;const s=Array.from(t.values()).filter(i=>i.status==="completed").slice(0,10);if(e.innerHTML="",s.length===0){e.innerHTML='<p class="text-muted">ÊöÇÊó†Â∑≤ÂÆåÊàê‰ªªÂä°</p>';return}s.forEach(i=>{var o;const n=document.createElement("div");n.className="task-item",n.innerHTML=`
                <div class="task-header">
                    <span class="task-name">${i.name||((o=i.id)==null?void 0:o.slice(0,8))}</span>
                    <span class="task-priority">‰ºòÂÖàÁ∫ß: ${i.priority||0}</span>
                </div>
                <div class="task-type">${this.getTaskTypeText(i.type)}</div>
                <div class="task-collaboration">${this.getCollaborationTypeText(i.collaborationType)}</div>
                ${i.assignedAgents?`<div class="task-agents">ÂàÜÈÖçAgent: ${i.assignedAgents.size}</div>`:""}
                <button class="btn btn-small view-topology-btn" data-task-id="${i.id}" style="margin-top: 8px;">View Topology</button>
            `,e.appendChild(n)}),e.querySelectorAll(".view-topology-btn").forEach(i=>{i.addEventListener("click",n=>{const o=n.target.getAttribute("data-task-id"),a=window.cosmicApp;if(a&&a.systemState&&a.systemState.taskChains){let r=null;for(const[l,m]of a.systemState.taskChains.entries())if(m.taskId===o){r=l;break}r&&a.networkViz&&(a.switchView("network"),setTimeout(()=>{a.networkViz.displaySavedTopology(r)},100))}})})}updateTaskChains(t){const e=document.getElementById("task-chains");if(!e||!t)return;e.innerHTML="";const s=Array.from(t.values());if(s.length===0){e.innerHTML='<p class="text-muted">ÊöÇÊó†‰ªªÂä°Èìæ</p>';return}s.forEach(i=>{var o,a;const n=document.createElement("div");n.className="task-chain-item",n.innerHTML=`
                <div class="chain-header">
                    <span class="chain-name">${i.name}</span>
                    <span class="chain-status">${this.getChainStatusText(i.status)}</span>
                </div>
                <div class="chain-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${(i.progress||0)*100}%"></div>
                    </div>
                    <span class="progress-text">${((i.progress||0)*100).toFixed(0)}%</span>
                </div>
                <div class="chain-tasks">
                    ‰ªªÂä°Êï∞: ${((o=i.tasks)==null?void 0:o.length)||0} | Â∑≤ÂÆåÊàê: ${((a=i.completedTasks)==null?void 0:a.size)||0}
                </div>
            `,e.appendChild(n)})}renderTaskList(t,e,s){if(t.innerHTML="",e.length===0){t.innerHTML=`<p class="text-muted">${s}</p>`;return}e.forEach(i=>{var o;const n=document.createElement("div");n.className="task-item",n.innerHTML=`
                <div class="task-header">
                    <span class="task-name">${i.name||((o=i.id)==null?void 0:o.slice(0,8))}</span>
                    <span class="task-priority">‰ºòÂÖàÁ∫ß: ${i.priority||0}</span>
                </div>
                <div class="task-type">${this.getTaskTypeText(i.type)}</div>
                <div class="task-collaboration">${this.getCollaborationTypeText(i.collaborationType)}</div>
                ${i.assignedAgents?`<div class="task-agents">ÂàÜÈÖçAgent: ${i.assignedAgents.size}</div>`:""}
            `,t.appendChild(n)})}getTaskTypeText(t){return{analysis:"Êï∞ÊçÆÂàÜÊûê",processing:"Êï∞ÊçÆÂ§ÑÁêÜ",reasoning:"Êé®ÁêÜ‰ªªÂä°",collaboration:"Âçè‰Ωú‰ªªÂä°"}[t]||t}getCollaborationTypeText(t){return{sequential:"È°∫Â∫èÂçè‰Ωú",parallel:"Âπ∂Ë°åÂçè‰Ωú",hierarchical:"ÂàÜÂ±ÇÂçè‰Ωú"}[t]||t}getChainStatusText(t){return{pending:"Á≠âÂæÖ‰∏≠",running:"ËøêË°å‰∏≠",completed:"Â∑≤ÂÆåÊàê",failed:"Â§±Ë¥•"}[t]||t}}class v{constructor(){this.container=null,this.charts=new Map}init(){console.log("Á≥ªÁªüÁõëÊéßÁªÑ‰ª∂Â∑≤ÂàùÂßãÂåñ")}update(t){var e,s;this.updatePerformanceCharts(t.metrics),this.updateResourceUsage(t.agents),this.updateCooperationWaves((e=t.tcf)==null?void 0:e.cooperationWaves),this.updateSingularityDetection((s=t.tcf)==null?void 0:s.singularityPoints)}updatePerformanceCharts(t){const e=document.getElementById("performance-charts");if(e){if(!t){e.innerHTML='<p class="text-muted">ÊöÇÊó†ÊÄßËÉΩÊï∞ÊçÆ</p>';return}e.innerHTML=`
            <div class="performance-metrics">
                <div class="metric-card">
                    <div class="metric-title">Â§ÑÁêÜ‰ªªÂä°ÊÄªÊï∞</div>
                    <div class="metric-number">${t.totalTasksProcessed||0}</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">ÊàêÂäüÂçè‰ΩúÊï∞</div>
                    <div class="metric-number">${t.successfulCollaborations||0}</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Âπ≥ÂùáÂìçÂ∫îÊó∂Èó¥</div>
                    <div class="metric-number">${(t.averageResponseTime||0).toFixed(2)}ms</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Ë¥®ÈáèÂàÜÊï∞</div>
                    <div class="metric-number">${((t.qualityScore||0)*100).toFixed(1)}%</div>
                </div>
            </div>
        `}}updateResourceUsage(t){const e=document.getElementById("resource-usage");if(!e||!t)return;const s=Array.from(t.values()),i=s.length,n=s.filter(a=>{var r;return((r=a.currentTasks)==null?void 0:r.size)>0}).length,o=i>0?n/i:0;e.innerHTML=`
            <div class="resource-metrics">
                <div class="resource-item">
                    <span class="resource-label">ÊÄªAgentÊï∞</span>
                    <span class="resource-value">${i}</span>
                </div>
                <div class="resource-item">
                    <span class="resource-label">Ê¥ªË∑ÉAgentÊï∞</span>
                    <span class="resource-value">${n}</span>
                </div>
                <div class="resource-item">
                    <span class="resource-label">Âπ≥ÂùáË¥üËΩΩ</span>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${o*100}%"></div>
                    </div>
                    <span class="resource-value">${(o*100).toFixed(1)}%</span>
                </div>
            </div>
        `}updateCooperationWaves(t){const e=document.getElementById("cooperation-waves");if(e){if(!t||t.length===0){e.innerHTML='<p class="text-muted">ÊöÇÊó†Âçè‰ΩúÊ≥¢Âä®</p>';return}e.innerHTML="",t.slice(0,5).forEach((s,i)=>{var o,a;const n=document.createElement("div");n.className="wave-item",n.innerHTML=`
                <div class="wave-header">
                    <span class="wave-id">Ê≥¢Âä® ${i+1}</span>
                    <span class="wave-amplitude">${(s.amplitude*100).toFixed(0)}%</span>
                </div>
                <div class="wave-source">Ê∫êAgent: ${(o=s.sourceAgentId)==null?void 0:o.slice(0,8)}</div>
                <div class="wave-frequency">È¢ëÁéá: ${(a=s.frequency)==null?void 0:a.toFixed(2)}Hz</div>
            `,e.appendChild(n)})}}updateSingularityDetection(t){const e=document.getElementById("singularity-detection");if(e){if(!t||t.length===0){e.innerHTML='<p class="text-muted">Êú™Ê£ÄÊµãÂà∞Â•áÁÇπ</p>';return}e.innerHTML="",t.forEach((s,i)=>{var o;const n=document.createElement("div");n.className=`singularity-item ${this.getSingularityClass(s.type)}`,n.innerHTML=`
                <div class="singularity-header">
                    <span class="singularity-id">Â•áÁÇπ ${i+1}</span>
                    <span class="singularity-type">${this.getSingularityTypeText(s.type)}</span>
                </div>
                <div class="singularity-intensity">Âº∫Â∫¶: ${(s.forceIntensity*100).toFixed(0)}%</div>
                <div class="singularity-risk">È£éÈô©Á≠âÁ∫ß: ${this.getRiskLevelText(s.riskLevel)}</div>
                <div class="singularity-agents">Ê∂âÂèäAgent: ${((o=s.convergedAgents)==null?void 0:o.length)||0}‰∏™</div>
            `,e.appendChild(n)})}}getSingularityClass(t){return{collaboration_hub:"positive",resource_drain:"warning",conflict_zone:"danger",overload_point:"danger",anomaly:"warning"}[t]||"neutral"}getSingularityTypeText(t){return{collaboration_hub:"Âçè‰Ωú‰∏≠ÂøÉ",resource_drain:"ËµÑÊ∫êÊ∂àËÄó",conflict_zone:"ÂÜ≤Á™ÅÂå∫Âüü",overload_point:"ËøáËΩΩÁÇπ",anomaly:"ÂºÇÂ∏∏"}[t]||t}getRiskLevelText(t){return t<.3?"‰Ωé":t<.7?"‰∏≠":"È´ò"}}class d{static isVercelDeployment(){return window.location.hostname.includes("vercel.app")}static isLocalhost(){return window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1"}static getBackendUrl(){return this.isVercelDeployment()?window.location.origin:this.isLocalhost()?"http://localhost:8080":window.location.origin}static getWebSocketUrl(){const t=this.getBackendUrl();return t.startsWith("https://")?t.replace("https://","wss://"):t.replace("http://","ws://")}static shouldUseDemoMode(){return!1}}class h{constructor(){this.eventSource=null,this.eventHandlers=new Map,this.connectionId=Math.random().toString(36).substring(2,9),this.isConnected=!1,this.isConnecting=!1,this.manualDisconnect=!1,this.reconnectInterval=3e3,this.maxReconnectAttempts=10,this.reconnectAttempts=0,this.demoMode=!1,this.connectionFailed=!1}async connect(t=d.getWebSocketUrl()){if(this.isConnected&&this.eventSource&&this.eventSource.readyState===EventSource.OPEN||this.isConnecting)return Promise.resolve();this.isConnecting=!0,this.manualDisconnect=!1,this.demoMode=!1,this.connectionFailed=!1;try{const e=this.convertToSSEUrl(t);return this.eventSource&&(this.eventSource.close(),this.eventSource=null),this.eventSource=new EventSource(e),this.setupEventHandlers(),new Promise((s,i)=>{const n=setTimeout(()=>{this.isConnecting=!1,this.eventSource.readyState!==EventSource.OPEN&&(d.isVercelDeployment()?(this.switchToDemoMode(),s()):i(new Error("Connection timeout")))},15e3);this.eventSource.onopen=()=>{clearTimeout(n),this.isConnected=!0,this.isConnecting=!1,this.reconnectAttempts=0,this.connectionFailed=!1,this.emit("connected"),s()},this.eventSource.onerror=o=>{if(clearTimeout(n),this.isConnected=!1,this.isConnecting=!1,this.connectionFailed=!0,this.emit("error",o),d.isVercelDeployment()){this.switchToDemoMode(),s();return}this.attemptReconnect(),i(o)}})}catch(e){if(this.isConnecting=!1,this.connectionFailed=!0,d.isVercelDeployment())return this.switchToDemoMode(),Promise.resolve();throw this.attemptReconnect(),e}}convertToSSEUrl(t){return t.replace("ws://","http://").replace("wss://","https://")+"/sse"}switchToDemoMode(){this.demoMode=!0,this.isConnected=!1,this.isConnecting=!1,this.connectionFailed=!1,this.eventSource&&(this.eventSource.close(),this.eventSource=null),this.emit("demo-mode-activated"),this.startDemoSimulation()}startDemoSimulation(){setTimeout(()=>{this.emit("ai-system-status",{timestamp:Date.now(),openaiApiKey:!1,totalAIAgents:6,activeCollaborations:0,totalCollaborations:3,connectedClients:0,sseClients:0,aiAgents:[{id:"demo-agent-1",name:"Prof. Smoot (Demo)",type:"specialized",status:"active",capabilities:["task_allocation","cosmic_structure_modeling"],personality:{traits:["nobel_prize_winner","analytical","precise"]},expertise:["cosmic_structure_theory","tensor_field_analysis"],position:{x:0,y:0,z:0},mass:3},{id:"demo-agent-2",name:"Dr. Analyzer (Demo)",type:"analyzer",status:"active",capabilities:["deep_analysis","pattern_recognition"],personality:{traits:["analytical","detail-oriented","systematic"]},expertise:["data_science","research_methodology"],position:{x:100,y:50,z:50},mass:2},{id:"demo-agent-3",name:"Prof. Reasoner (Demo)",type:"reasoner",status:"active",capabilities:["logical_reasoning","inference"],personality:{traits:["logical","methodical","rational"]},expertise:["formal_logic","philosophy"],position:{x:-100,y:100,z:-50},mass:1.8}],system:{memory:{rss:85426176,heapTotal:60135568,heapUsed:38754336,external:1878528},uptime:120}})},1e3);let t=1;const e=setInterval(()=>{if(!this.demoMode){clearInterval(e);return}this.emit("ai-agent-update",{id:"demo-agent-"+(1+Math.floor(Math.random()*3)),name:"Demo Agent",type:"demo",status:"active",capabilities:["demo_capability"],personality:{traits:["demo"]},expertise:["demo_expertise"],position:{x:Math.random()*200-100,y:Math.random()*200-100,z:Math.random()*200-100},mass:1+Math.random()*2}),Math.random()>.7&&this.emit("task-chain-execution-step",{taskChainId:"demo-chain-"+Math.floor(Math.random()*100),step:Math.floor(Math.random()*5)+1,agentId:"demo-agent-"+(1+Math.floor(Math.random()*3)),action:"analyzing",content:"Processing demo task data..."}),Math.random()>.9&&this.emit("task-chain-completed",{chainId:"demo-chain-"+t++,result:"Demo task completed successfully",executionTime:Math.floor(Math.random()*1e3)+500})},3e3)}setupEventHandlers(){this.eventSource.onmessage=t=>{try{const e=JSON.parse(t.data);e.event?this.emit(e.event,e.data):this.emit("message",e)}catch{this.emit("message",t.data)}},this.eventSource.addEventListener("ai-system-status",t=>{try{const e=JSON.parse(t.data);this.emit("ai-system-status",e)}catch{}}),this.eventSource.addEventListener("agent-update",t=>{try{const e=JSON.parse(t.data);this.emit("agent-update",e)}catch{}}),this.eventSource.addEventListener("task-update",t=>{try{const e=JSON.parse(t.data);this.emit("task-update",e)}catch{}}),this.eventSource.addEventListener("collaboration-update",t=>{try{const e=JSON.parse(t.data);this.emit("collaboration-update",e)}catch{}}),this.eventSource.addEventListener("topology-update",t=>{try{const e=JSON.parse(t.data);this.emit("topology-update",e)}catch{}}),this.eventSource.addEventListener("network-topology-update",t=>{try{const e=JSON.parse(t.data);this.emit("network-topology-update",e)}catch{}}),this.eventSource.addEventListener("tcf-update",t=>{try{const e=JSON.parse(t.data);this.emit("tcf-update",e)}catch{}}),this.eventSource.addEventListener("task-chain-execution-step",t=>{try{const e=JSON.parse(t.data);this.emit("task-chain-execution-step",e)}catch{}}),this.eventSource.addEventListener("task-chain-completed",t=>{try{const e=JSON.parse(t.data);this.emit("task-chain-completed",e)}catch{}}),this.eventSource.addEventListener("prof-smoot-allocation",t=>{try{const e=JSON.parse(t.data);this.emit("prof-smoot-allocation",e)}catch{}}),this.eventSource.addEventListener("fallback-allocation",t=>{try{const e=JSON.parse(t.data);this.emit("fallback-allocation",e)}catch{}}),this.eventSource.addEventListener("ai-collaboration-completed",t=>{try{const e=JSON.parse(t.data);this.emit("ai-collaboration-completed",e)}catch{}}),this.eventSource.addEventListener("ai-collaboration-update",t=>{try{const e=JSON.parse(t.data);this.emit("ai-collaboration-update",e)}catch{}}),this.eventSource.addEventListener("ai-task-completed",t=>{try{const e=JSON.parse(t.data);this.emit("ai-task-completed",e)}catch{}}),this.eventSource.addEventListener("ai-task-acknowledged",t=>{try{const e=JSON.parse(t.data);this.emit("ai-task-acknowledged",e)}catch{}}),this.eventSource.addEventListener("ai-agent-created",t=>{try{const e=JSON.parse(t.data);this.emit("ai-agent-created",e)}catch(e){console.error("Error parsing ai-agent-created event:",e)}}),this.eventSource.addEventListener("agent-created",t=>{try{const e=JSON.parse(t.data);this.emit("agent-created",e)}catch(e){console.error("Error parsing agent-created event:",e)}}),this.eventSource.addEventListener("ai-agent-update",t=>{try{const e=JSON.parse(t.data);this.emit("ai-agent-update",e)}catch{}})}attemptReconnect(){if(!this.demoMode)if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const t=Math.min(this.reconnectInterval*Math.pow(1.5,this.reconnectAttempts),3e4);setTimeout(()=>{this.connect()},t)}else this.emit("reconnect-failed")}send(t,e={}){if(this.demoMode)return console.log("üì§ Sending message in demo mode:",t,e),this.simulateDemoResponse(t,e),!0;if(this.isConnected)try{const s=this.convertToSSEUrl(d.getWebSocketUrl()).replace("/sse","/api/message");return console.log("üì§ Sending message to API:",s,{type:t,payload:e}),fetch(s,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:t,payload:e})}).then(i=>{i.ok?console.log("‚úÖ Message sent successfully"):(console.error("‚ùå Failed to send message:",i.status,i.statusText),this.emit("send-error",{type:t,status:i.status,statusText:i.statusText}))}).catch(i=>{console.error("‚ùå Error sending message:",i),this.emit("send-error",{type:t,error:i.message})}),!0}catch(s){return console.error("‚ùå Exception while sending message:",s),this.emit("send-error",{type:t,error:s.message}),!1}else return console.warn("‚ö†Ô∏è Not connected, cannot send message"),this.isConnecting||this.connect(),!1}simulateDemoResponse(t,e){switch(t){case"get-ai-status":break;case"get-topology-data":setTimeout(()=>{this.emit("topology-update",{nodes:[{id:"demo-agent-1",name:"Prof. Smoot (Demo)",type:"specialized",status:"active",position:{x:0,y:0,z:0},energy:95},{id:"demo-agent-2",name:"Dr. Analyzer (Demo)",type:"analyzer",status:"active",position:{x:100,y:50,z:50},energy:87},{id:"demo-agent-3",name:"Prof. Reasoner (Demo)",type:"reasoner",status:"active",position:{x:-100,y:100,z:-50},energy:92}],connections:[{source:"demo-agent-1",target:"demo-agent-2",strength:.8,type:"collaboration"},{source:"demo-agent-2",target:"demo-agent-3",strength:.6,type:"data_flow"},{source:"demo-agent-1",target:"demo-agent-3",strength:.4,type:"coordination"}]})},500);break;case"submit-ai-task":setTimeout(()=>{this.emit("ai-task-acknowledged",{taskId:e.id||"demo-task-"+Date.now(),message:"Task received and processing started (Demo Mode)"}),setTimeout(()=>{this.emit("ai-task-completed",{success:!0,result:{taskId:e.id||"demo-task-"+Date.now(),finalResult:"This is a simulated result from the demo mode. In a real deployment, this would be generated by actual AI agents working together.",executionSteps:[{agent:"Prof. Smoot (Demo)",action:"Task allocation",duration:150},{agent:"Dr. Analyzer (Demo)",action:"Data analysis",duration:320},{agent:"Prof. Reasoner (Demo)",action:"Logical reasoning",duration:280}]}})},2e3)},500);break;case"create-ai-agent":setTimeout(()=>{this.emit("ai-agent-created",{success:!0,agent:{id:"demo-agent-"+Date.now(),name:e.name||"Demo Agent",type:e.type||"demo",status:"active",capabilities:e.capabilities||["demo_capability"],personality:e.personality||{traits:["demo"]},expertise:e.expertise||["demo_expertise"],position:e.position||{x:0,y:0,z:0},mass:e.mass||1}})},500);break}}on(t,e){this.eventHandlers.has(t)||this.eventHandlers.set(t,[]),this.eventHandlers.get(t).push(e)}off(t,e){const s=this.eventHandlers.get(t);if(s){const i=s.indexOf(e);i>-1&&s.splice(i,1)}}emit(t,e){const s=this.eventHandlers.get(t);s&&s.forEach(i=>{try{i(e)}catch{}})}disconnect(){if(this.demoMode){this.isConnected=!1,this.isConnecting=!1,this.demoMode=!1;return}this.manualDisconnect=!0,this.eventSource&&(this.eventSource.close(),this.eventSource=null,this.isConnected=!1,this.isConnecting=!1)}get connected(){return this.demoMode?!1:this.eventSource&&this.eventSource.readyState===EventSource.OPEN}get isDemoMode(){return this.demoMode}get hasConnectionFailed(){return this.connectionFailed}}class k{constructor(){this.ws=new h,this.currentView="ai-overview",this.isConnected=!1,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.connectionRetryCount=0,this.maxConnectionRetries=3;try{this.networkViz=null}catch{this.networkViz=null}try{this.tcfViz=new p("#tcf-visualization")}catch{this.tcfViz=null}try{this.taskChainViz=new g("#task-chain-graph")}catch{this.taskChainViz=null}try{this.collaborationMonitor=new y}catch{this.collaborationMonitor=null}try{this.taskManager=new f}catch{this.taskManager=null}try{this.systemMonitor=new v}catch{this.systemMonitor=null}this.systemState={agents:new Map,tasks:new Map,taskChains:new Map,collaborationSessions:new Map,metrics:{}},this.initializeApp()}async initializeApp(){window.cosmicApp=this,this.registerServiceWorker(),this.setupEventListeners(),this.setupWebSocketHandlers(),await this.connectToServer(),setTimeout(()=>{this.initializeComponents(),this.startDataPolling(),this.generateSampleSystemState(),this.networkViz&&setTimeout(()=>{(!this.networkViz.initialized||!this.networkViz.svg)&&this.networkViz.reinitialize()},1500)},1e3),setInterval(()=>{this.currentView==="network"&&this.networkViz&&(this.networkViz.nodes.length===0&&(this.networkViz.generateSampleData(),this.networkViz.render()),this.networkViz.isProperlySetUp()||this.networkViz.forceRender())},3e3)}registerServiceWorker(){"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/sw.js").then(t=>{console.log("Service Worker registered with scope:",t.scope)}).catch(t=>{console.log("Service Worker registration failed:",t)})})}async init(){await this.initializeApp()}async connectToServer(){try{await this.ws.connect(d.getBackendUrl()),this.ws.on("disconnected",t=>{this.isConnected=!1,t!=="io client disconnect"&&this.attemptReconnect()}),this.ws.on("error",t=>{this.attemptReconnect()})}catch{this.attemptReconnect()}}fetchRealAIAgents(){this.ws&&this.ws.connected?this.ws.send("get-topology-data"):(this.generateSampleSystemState(),this.networkViz&&this.networkViz.update(this.systemState))}initNetworkVisualizer(){this.networkViz&&this.networkViz.reinitialize()}attemptReconnect(){this.reconnectAttempts<this.maxReconnectAttempts?(this.reconnectAttempts++,setTimeout(()=>{this.connectToServer()},3e3*this.reconnectAttempts)):this.showConnectionError()}showConnectionError(){const t=document.createElement("div");t.className="connection-error",t.innerHTML=`
            <div style="position: fixed; top: 20px; right: 20px; background: #ef4444; color: white; padding: 15px; border-radius: 8px; z-index: 10000; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                <strong>‚ùå Connection Error</strong>
                <p>Could not connect to the AI server. Please make sure the server is running.</p>
                <button onclick="this.parentElement.remove()" style="background: white; color: #ef4444; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; margin-top: 5px;">Dismiss</button>
            </div>
        `,document.body.appendChild(t)}setupEventListeners(){var t,e,s,i,n;document.querySelectorAll(".nav-btn").forEach(o=>{o.addEventListener("click",a=>{const r=a.target.dataset.view;this.switchView(r)})}),(t=document.getElementById("layout-circular"))==null||t.addEventListener("click",()=>{this.networkViz&&this.networkViz.svg&&this.networkViz.setLayout("circular")}),(e=document.getElementById("layout-hierarchical"))==null||e.addEventListener("click",()=>{this.networkViz&&this.networkViz.svg&&this.networkViz.setLayout("hierarchical")}),(s=document.getElementById("refresh-topology"))==null||s.addEventListener("click",()=>{this.fetchRealAIAgents(),this.updateCurrentView()}),(i=document.getElementById("node-size"))==null||i.addEventListener("input",o=>{this.networkViz&&this.networkViz.svg&&this.networkViz.setNodeSize(o.target.value)}),(n=document.getElementById("link-strength"))==null||n.addEventListener("input",o=>{this.networkViz&&this.networkViz.svg&&this.networkViz.setLinkStrength(o.target.value)}),window.addEventListener("resize",()=>{this.currentView==="network"&&this.networkViz&&setTimeout(()=>{this.networkViz.resize()},100)})}setupWebSocketHandlers(){this.ws.on("connected",()=>{this.isConnected=!0,this.reconnectAttempts=0,this.updateConnectionStatus("online"),this.ws.send("get-topology-data")}),this.ws.on("disconnected",t=>{this.isConnected=!1,this.updateConnectionStatus("offline")}),this.ws.on("error",t=>{this.isConnected=!1,this.updateConnectionStatus("error")}),this.ws.on("ai-system-status",t=>{this.updateSystemStatus(t)}),this.ws.on("agent-update",t=>{this.updateAgent(t)}),this.ws.on("task-update",t=>{this.updateTask(t)}),this.ws.on("collaboration-update",t=>{this.updateCollaboration(t)}),this.ws.on("topology-update",t=>{this.updateTopology(t)}),this.ws.on("network-topology-update",t=>{this.updateTopology(t)}),this.ws.on("tcf-update",t=>{this.updateTCF(t)}),this.ws.on("task-chain-execution-step",t=>{this.handleTaskChainExecutionStep(t)}),this.ws.on("task-chain-completed",t=>{this.handleTaskChainCompleted(t)}),this.ws.on("prof-smoot-allocation",t=>{this.handleProfSmootAllocation(t)}),this.ws.on("fallback-allocation",t=>{this.handleFallbackAllocation(t)}),this.ws.on("demo-mode-activated",()=>{this.updateConnectionStatus("demo");const t=document.createElement("div");t.className="demo-notification",t.innerHTML=`
                <div style="position: fixed; top: 20px; right: 20px; background: #8b5cf6; color: white; padding: 15px; border-radius: 8px; z-index: 10000; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                    <strong>üéÆ Demo Mode Active</strong>
                    <p>Running in demo mode with simulated data.</p>
                    <button onclick="this.parentElement.remove()" style="background: white; color: #8b5cf6; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; margin-top: 5px;">Dismiss</button>
                </div>
            `,document.body.appendChild(t)})}handleProfSmootAllocation(t){this.taskManager&&this.taskManager.updateTaskAllocation(t,"prof-smoot")}handleFallbackAllocation(t){this.taskManager&&this.taskManager.updateTaskAllocation(t,"fallback")}handleTaskChainExecutionStep(t){this.systemState.taskChainSteps||(this.systemState.taskChainSteps=new Map),this.systemState.taskChainSteps.has(t.taskChainId)||this.systemState.taskChainSteps.set(t.taskChainId,[]),this.systemState.taskChainSteps.get(t.taskChainId).push(t),this.currentView==="tasks"&&this.updateTaskChainVisualization(t.taskChainId),this.currentView==="network"&&this.networkViz&&this.networkViz.highlightExecutionStep(t)}handleTaskChainCompleted(t){var e;if(this.systemState.taskChains.set(t.chainId,t),t.executionSteps&&!this.systemState.taskChainSteps&&(this.systemState.taskChainSteps=new Map),t.executionSteps&&this.systemState.taskChainSteps.set(t.chainId,t.executionSteps),this.currentView==="tasks"&&this.updateTaskChainVisualization(t.chainId),this.networkViz){const s=t.executionSteps||((e=this.systemState.taskChainSteps)==null?void 0:e.get(t.chainId))||[];this.networkViz.updateWithTaskChain({id:t.chainId,executionPath:s,metrics:t.metrics||{}})}}updateTaskChainVisualization(t){var n;const e=document.getElementById("task-chain-visualization-section");e&&(e.style.display="block");const s=this.systemState.taskChains.get(t),i=((n=this.systemState.taskChainSteps)==null?void 0:n.get(t))||[];if(s||i.length>0){const o={id:t,executionPath:i,tasks:(s==null?void 0:s.results)||[],metrics:(s==null?void 0:s.metrics)||{}};this.taskChainViz&&this.taskChainViz.updateTaskChain(o),this.updateTaskChainDetails(o),this.currentView==="network"&&this.networkViz&&this.networkViz.updateWithTaskChain(o)}}updateTaskChainDetails(t){const e=document.getElementById("task-chain-info");if(!e)return;const s=t.executionPath.length,i=new Set(t.executionPath.map(a=>a.agentId)).size,n=new Map;t.executionPath.forEach(a=>{n.has(a.agentId)||n.set(a.agentId,[]),n.get(a.agentId).push(a)}),e.innerHTML=`
            <div class="task-chain-summary">
                <p><strong>Task Chain ID:</strong> ${t.id.substring(0,8)}...</p>
                <p><strong>Total Steps:</strong> ${s}</p>
                <p><strong>Unique Agents:</strong> ${i}</p>
                ${t.metrics&&Object.keys(t.metrics).length>0?`
                <p><strong>Success Rate:</strong> ${(t.metrics.successRate*100).toFixed(1)}%</p>
                <p><strong>Execution Time:</strong> ${t.metrics.executionTime}ms</p>
                `:""}
                <button id="view-topology-btn" class="btn btn-primary" style="margin-top: 10px;">View Network Topology</button>
            </div>
            <div class="execution-steps">
                <h5>Execution Steps by Agent:</h5>
                ${Array.from(n.entries()).map(([a,r])=>`
                    <div class="agent-step-group">
                        <h6>Agent: ${r[0].agentDetails?r[0].agentDetails[0].name:a.substring(0,8)}...</h6>
                        <ul>
                            ${r.map(l=>`
                                <li>${l.taskName||`Task ${l.taskId.substring(0,8)}...`} at ${new Date(l.timestamp).toLocaleTimeString()}</li>
                            `).join("")}
                        </ul>
                    </div>
                `).join("")}
            </div>
        `;const o=document.getElementById("view-topology-btn");o&&o.addEventListener("click",()=>{this.switchView("network"),setTimeout(()=>{this.networkViz&&this.networkViz.displaySavedTopology(t.id)},100)})}refreshTaskChainVisualization(){this.taskChainViz&&this.taskChainViz.init();const t=Array.from(this.systemState.taskChains.keys());if(t.length>0){const e=t[t.length-1];this.updateTaskChainVisualization(e)}}clearTaskChainVisualization(){const t=document.getElementById("task-chain-visualization-section");t&&(t.style.display="none"),this.taskChainViz&&this.taskChainViz.clear();const e=document.getElementById("task-chain-info");e&&(e.innerHTML="")}updateConnectionStatus(t){const e=document.getElementById("connection-status");e&&(e.className=`status-${t}`,e.textContent=t.charAt(0).toUpperCase()+t.slice(1));const s=document.querySelector(".header .status-indicator");s&&(s.className="status-indicator "+t)}updateSystemStatus(t){this.systemState.metrics=t,this.systemMonitor&&this.systemMonitor.updateMetrics(t)}updateAgent(t){this.systemState.agents.set(t.id,t),this.updateAgentList(),this.networkViz&&this.networkViz.updateAgent(t)}updateTask(t){this.systemState.tasks.set(t.id,t),this.taskManager&&this.taskManager.updateTask(t)}updateCollaboration(t){this.systemState.collaborationSessions.set(t.id,t),this.collaborationMonitor&&this.collaborationMonitor.updateSession(t)}updateTopology(t){this.networkViz&&this.networkViz.updateTopology(t)}updateTCF(t){this.tcfViz&&this.tcfViz.update(t)}updateAgentList(){const t=document.getElementById("agent-list");if(!t)return;const e=Array.from(this.systemState.agents.values());t.innerHTML=e.map(s=>`
            <div class="agent-card" data-agent-id="${s.id}">
                <div class="agent-header">
                    <h4>${s.name}</h4>
                    <span class="agent-type">${s.type}</span>
                </div>
                <div class="agent-status">
                    <span class="status-indicator ${s.status}"></span>
                    <span>${s.status}</span>
                </div>
                <div class="agent-energy">
                    <div class="energy-bar">
                        <div class="energy-fill" style="width: ${s.energy}%"></div>
                    </div>
                    <span>${s.energy}/${s.maxEnergy}</span>
                </div>
                <div class="agent-capabilities">
                    ${s.capabilities.slice(0,3).map(i=>`<span class="capability-tag">${i}</span>`).join("")}
                </div>
            </div>
        `).join("")}updateSystemMetrics(){const t=document.getElementById("system-metrics");if(!t)return;const e=this.systemState.metrics;e&&(t.innerHTML=`
            <div class="metric-card">
                <h4>Active Agents</h4>
                <span class="metric-value">${e.totalAIAgents||0}</span>
            </div>
            <div class="metric-card">
                <h4>Active Collaborations</h4>
                <span class="metric-value">${e.activeCollaborations||0}</span>
            </div>
            <div class="metric-card">
                <h4>Total Tasks</h4>
                <span class="metric-value">${e.totalTasks||0}</span>
            </div>
            <div class="metric-card">
                <h4>Connected Clients</h4>
                <span class="metric-value">${e.connectedClients||0}</span>
            </div>
        `)}generateSampleSystemState(){const t=[{id:"agent-1",name:"Prof. Smoot",type:"cosmic_structure_expert",status:"active",energy:95,maxEnergy:100,position:{x:0,y:0,z:0},connections:["agent-2","agent-3"],ai:{focusLevel:.9,memoryLoad:{shortTerm:5,longTerm:42},currentThought:"Analyzing cosmic structure patterns..."},capabilities:["cosmic_structure_analysis","gravitational_field_modeling"],personality:{traits:["analytical","methodical","precise"]}},{id:"agent-2",name:"Dr. Analyzer",type:"analyzer",status:"processing",energy:87,maxEnergy:100,position:{x:100,y:50,z:20},connections:["agent-1","agent-4"],ai:{focusLevel:.7,memoryLoad:{shortTerm:8,longTerm:36},currentThought:"Processing data patterns..."},capabilities:["deep_analysis","pattern_recognition"],personality:{traits:["analytical","detail-oriented","systematic"]}},{id:"agent-3",name:"Ms. Synthesizer",type:"synthesizer",status:"active",energy:92,maxEnergy:100,position:{x:-100,y:75,z:-30},connections:["agent-1","agent-5"],ai:{focusLevel:.8,memoryLoad:{shortTerm:3,longTerm:28},currentThought:"Synthesizing knowledge domains..."},capabilities:["information_synthesis","knowledge_integration"],personality:{traits:["creative","integrative","holistic"]}}];t.forEach(e=>{this.systemState.agents.set(e.id,e)}),this.updateAgentList(),this.updateSystemMetrics(),this.networkViz&&this.networkViz.updateWithAgents(t)}initializeComponents(){if(this.tcfViz)try{this.tcfViz.init()}catch{}if(this.taskChainViz)try{this.taskChainViz.init()}catch{}if(this.collaborationMonitor)try{this.collaborationMonitor.init()}catch{}if(this.taskManager)try{this.taskManager.init()}catch{}if(this.systemMonitor)try{this.systemMonitor.init()}catch{}}switchView(t){this.currentView=t,document.querySelectorAll(".nav-btn").forEach(s=>{s.classList.remove("active"),s.dataset.view===t&&s.classList.add("active")}),document.querySelectorAll(".view").forEach(s=>{s.style.display="none"});const e=document.getElementById(t);e&&(e.style.display="block",setTimeout(()=>{if(this.updateCurrentView(),t==="network"){if(!this.networkViz)try{this.networkViz=new u("#network-graph")}catch{this.networkViz=null}const s=document.getElementById("network-graph");s&&(s.style.display="block",s.style.visibility="visible"),this.networkViz&&setTimeout(()=>{this.networkViz&&(this.networkViz.initWhenReady(30,300),setTimeout(()=>{this.networkViz.update(this.systemState),this.networkViz.nodes.length===0&&(this.networkViz.generateSampleData(),this.networkViz.render())},1e3))},500)}},150))}updateCurrentView(){try{switch(this.currentView){case"network":if(!this.networkViz)try{this.networkViz=new u("#network-graph")}catch{this.networkViz=null}if(this.networkViz)if(!this.networkViz.initialized||!this.networkViz.svg)this.networkViz.initWhenReady(15,150),setTimeout(()=>{this.networkViz.update(this.systemState),this.networkViz.nodes.length===0&&(this.networkViz.generateSampleData(),this.networkViz.render());const t=document.getElementById("network-graph");t&&(t.style.display="block",t.style.visibility="visible")},800);else{this.networkViz.update(this.systemState),this.networkViz.nodes.length===0&&(this.networkViz.generateSampleData(),this.networkViz.render());const t=document.getElementById("network-graph");t&&(t.style.display="block",t.style.visibility="visible"),this.networkViz.svg&&(this.networkViz.svg.style("display","block"),this.networkViz.svg.style("visibility","visible"))}break;case"collaboration":this.collaborationMonitor&&this.collaborationMonitor.update();break;case"monitoring":this.systemMonitor&&this.systemMonitor.update();break}}catch{}}}document.addEventListener("DOMContentLoaded",()=>{try{const c=new k}catch{}});class b{constructor(){this.websocket=null,this.aiAgents=new Map,this.activeCollaborations=new Map,this.taskHistory=[],this.initializeInterface(),this.connectWebSocket()}initializeInterface(){console.log("üöÄ Initializing Real AI Interface..."),this.createTaskInterface(),console.log("‚úÖ Task Results & History Panel created"),this.setupEventListeners(),console.log("‚úÖ Event listeners setup"),setTimeout(()=>{this.handleWindowResize()},100),window.addEventListener("resize",()=>{this.handleWindowResize()}),setTimeout(()=>{const t=document.getElementById("ai-task-description"),e=document.getElementById("ai-task-form");console.log("Form verification:",{taskDescription:!!t,aiTaskForm:!!e,descriptionValue:t?t.value:"N/A",descriptionPlaceholder:t?t.placeholder:"N/A"}),t||console.error("‚ùå Task description element not found after initialization!"),e||console.error("‚ùå AI task form not found after initialization!")},200),console.log("‚úÖ Real AI Interface initialization complete")}createTaskInterface(){const t=document.createElement("div");t.className="task-panel horizontal-layout",t.innerHTML=`
            <!-- ÂêàÂπ∂AI Collaboration LabÂäüËÉΩ -->
            <div class="panel-section collaboration-lab-section">
                <div class="panel-header">
                    <h3>ü§ù AI Collaboration Lab</h3>
                </div>
                
                <div class="task-submission">
                    <h5>Submit Task for AI Collaboration</h5>
                    <form id="ai-task-form">
                        <div class="form-group">
                            <label>Task Description:</label>
                            <textarea id="ai-task-description" rows="4" placeholder="Describe the complex problem you want AI agents to collaborate on..."></textarea>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label>Task Type</label>
                                <select id="task-type">
                                    <option value="strategic_analysis">Strategic Analysis</option>
                                    <option value="creative_problem_solving">Creative Problem Solving</option>
                                    <option value="technical_evaluation">Technical Evaluation</option>
                                    <option value="ethical_analysis">Ethical Analysis</option>
                                    <option value="research_synthesis">Research Synthesis</option>
                                    <option value="innovation_challenge">Innovation Challenge</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Priority:</label>
                                <select id="task-priority">
                                    <option value="1">Low</option>
                                    <option value="3">Medium</option>
                                    <option value="5">High</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Complexity:</label>
                                <input type="range" id="task-complexity" min="10" max="100" value="50">
                                <span id="complexity-value">50</span>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>Required Capabilities (select multiple):</label>
                            <div class="capabilities-checkboxes">
                                <label><input type="checkbox" value="deep_analysis"> Deep Analysis</label>
                                <label><input type="checkbox" value="logical_reasoning"> Logical Reasoning</label>
                                <label><input type="checkbox" value="creative_thinking"> Creative Thinking</label>
                                <label><input type="checkbox" value="information_synthesis"> Information Synthesis</label>
                                <label><input type="checkbox" value="result_validation"> Result Validation</label>
                                <label><input type="checkbox" value="ethical_reasoning"> Ethical Reasoning</label>
                            </div>
                        </div>
                        
                        <button type="submit" class="btn btn-success">üöÄ Start AI Collaboration</button>
                    </form>
                </div>
            </div>
            
            <!-- ÂéüÊúâÁöÑ‰ªªÂä°ÁªìÊûúÂíåÂéÜÂè≤ÂäüËÉΩ -->
            <div class="panel-section task-results-section">
                <div class="panel-header">
                    <h3>üìã Task Results & History</h3>
                </div>
                
                <div id="active-task-display" class="active-task" style="display: none;">
                    <h4>üîÑ Collaboration in Progress</h4>
                    <div class="task-progress">
                        <div class="progress-bar">
                            <div id="progress-fill" class="progress-fill"></div>
                        </div>
                        <div id="progress-text">Initializing...</div>
                    </div>
                    <div id="collaboration-phases" class="phases-display"></div>
                </div>
                
                <div id="task-results" class="task-results"></div>
                
                <div id="task-history" class="task-history">
                    <h4>Previous Collaborations</h4>
                    <div id="history-list" class="history-list"></div>
                </div>
            </div>
            
            <!-- ÂêàÂπ∂AI Agent ControlÂäüËÉΩ -->
            <div class="panel-section ai-control-section">
                <div class="panel-header">
                    <h3>üß† Real AI Agent Control</h3>
                    <div class="ai-status">
                        <span id="ai-status-indicator" class="status-dot offline"></span>
                        <span id="ai-status-text">Connecting...</span>
                    </div>
                </div>
                
                <div class="ai-agents-section">
                    <h5>Active AI Agents</h5>
                    <div id="ai-agents-list" class="agents-list"></div>
                    <button id="create-ai-agent-btn" class="btn btn-primary">Create AI Agent</button>
                </div>
                
                <div class="collaboration-section">
                    <h5>Live Collaborations</h5>
                    <div id="active-collaborations" class="collaborations-list"></div>
                </div>
            </div>
        `,document.body.appendChild(t)}setupEventListeners(){console.log("Setting up event listeners...");const t=()=>{const e=document.getElementById("task-complexity"),s=document.getElementById("complexity-value");e&&s?(this.complexitySliderListener&&e.removeEventListener("input",this.complexitySliderListener),this.complexitySliderListener=o=>{s.textContent=o.target.value},e.addEventListener("input",this.complexitySliderListener),console.log("‚úÖ Complexity slider listener added")):console.warn("‚ö†Ô∏è Complexity slider elements not found");const i=document.getElementById("ai-task-form");if(i){if(i.hasAttribute("data-listener-attached")){console.log("‚ö†Ô∏è Task form listener already attached, skipping");return}i.setAttribute("data-listener-attached","true"),this.taskFormSubmitListener=o=>{o.preventDefault(),console.log("Form submit event triggered"),this.submitAITask()},i.addEventListener("submit",this.taskFormSubmitListener),console.log("‚úÖ Task form listener added")}else console.warn("‚ö†Ô∏è AI task form not found");const n=document.getElementById("create-ai-agent-btn");if(n){if(n.hasAttribute("data-listener-attached")){console.log("‚ö†Ô∏è Create agent button listener already attached, skipping");return}n.setAttribute("data-listener-attached","true"),this.createAgentBtnListener=()=>{this.showCreateAgentDialog()},n.addEventListener("click",this.createAgentBtnListener),console.log("‚úÖ Create agent button listener added")}else console.warn("‚ö†Ô∏è Create agent button not found");this.setupPanelToggle()};t(),setTimeout(t,50),setTimeout(t,200),window.addEventListener("resize",this.handleWindowResize.bind(this))}setupPanelToggle(){setTimeout(()=>{const t=document.querySelector(".task-panel");if(t&&!t.querySelector(".panel-toggle")){const e=document.createElement("div");e.className="panel-toggle",e.title="ÊäòÂè†/Â±ïÂºÄÈù¢Êùø",e.innerHTML="<span>‚ñº</span>",t.appendChild(e),e.addEventListener("click",()=>{this.toggleTaskPanel()}),console.log("‚úÖ Panel toggle button added")}else console.warn(t?"‚ö†Ô∏è Panel toggle button already exists":"‚ö†Ô∏è Task panel not found")},100)}toggleTaskPanel(){const t=document.querySelector(".task-panel"),e=t==null?void 0:t.querySelector(".panel-toggle");if(t&&e){t.classList.toggle("collapsed");const s=e.querySelector("span");s&&(t.classList.contains("collapsed")?(s.textContent="‚ñ≤",t.style.height="50px",t.style.maxHeight="50px"):(s.textContent="‚ñº",t.style.height="400px",t.style.maxHeight="400px")),console.log("Toggled task panel")}}handleWindowResize(){const t=window.innerWidth<=768,e=document.querySelector(".task-panel");t?(e==null||e.classList.add("mobile-layout"),e==null||e.classList.remove("horizontal-layout"),e&&(e.style.position="static",e.style.height="auto",e.style.maxHeight="none",e.style.margin="20px auto",e.style.marginLeft="auto",e.style.marginRight="auto",e.style.width="calc(100% - 40px)",e.style.boxSizing="border-box")):e&&(e.style.position="fixed",e.style.height="400px",e.style.maxHeight="400px",e.style.top="",e.style.bottom="20px",e.style.left="10px",e.style.right="30px",e.style.transform="translateY(30px)",e.style.zIndex="",e.style.margin="",e.style.marginLeft="",e.style.marginRight="",e.style.width="",e.style.boxSizing="",e.classList.remove("mobile-layout"),e.classList.add("horizontal-layout"))}connectWebSocket(){console.log("üîÑ Connecting to Real AI Server..."),window.app&&window.app.ws&&window.app.ws.socket?(console.log("üîó Reusing main app WebSocket connection"),this.websocket=window.app.ws,this.setupWebSocketHandlers(),setTimeout(()=>{this.requestAIStatus()},1e3)):(console.log("üîó Creating new connection"),this.websocket=new h,this.websocket.connect(d.getBackendUrl()).catch(t=>{console.error("‚ùå Failed to connect:",t),this.updateAIStatus("offline","Connection Failed")}),this.setupWebSocketHandlers()),setInterval(()=>{if(this.websocket){const t=this.websocket.connected||!1;console.log(`[RealAIInterface] Connection status check: ${t}`)}},5e3)}setupWebSocketHandlers(){this.websocket.on("connected",()=>{console.log("‚úÖ Connected to Real AI Server"),this.updateAIStatus("online","Connected to Real AI Server"),setTimeout(()=>{this.requestAIStatus()},1e3)}),this.websocket.on("disconnected",t=>{console.log("‚ùå Disconnected from Real AI Server:",t),this.updateAIStatus("offline","Disconnected")}),this.websocket.on("error",t=>{console.error("‚ùå Connection error:",t),this.updateAIStatus("error","Connection Error")}),this.websocket.on("ai-system-status",t=>{this.updateSystemStatus(t)}),this.websocket.on("ai-agent-update",t=>{this.updateAgentList(t)}),this.websocket.on("ai-agent-created",t=>{t.success?(console.log("‚úÖ AI Agent created successfully:",t.agent),this.addAgentToList(t.agent),this.hideCreateAgentDialog()):(console.error("‚ùå Failed to create AI Agent:",t.error),this.showAgentCreationError(t.error))}),this.websocket.on("agent-created",t=>{t.success?(console.log("‚úÖ AI Agent created successfully:",t.agent),this.addAgentToList(t.agent),this.hideCreateAgentDialog()):(console.error("‚ùå Failed to create AI Agent:",t.error),this.showAgentCreationError(t.error))}),this.websocket.on("send-error",t=>{console.error("‚ùå Send error:",t),this.showTaskError(`Failed to send task to server: ${t.error||t.statusText||"Unknown error"}`)}),this.websocket.on("ai-task-acknowledged",t=>{console.log("üì® Task acknowledged:",t),this.showTaskInProgress(t.taskId)}),this.websocket.on("ai-task-error",t=>{console.error("‚ùå Task error from server:",t),this.showTaskError(t.error||"Unknown task error occurred")}),this.websocket.on("ai-task-completed",t=>{console.log("‚úÖ Task completed:",t);const e=document.getElementById("active-task-display");e&&(e.style.display="none");try{if(t&&t.success)this.showTaskResult(t.result),this.addToTaskHistory(t.result);else{const s=t&&t.error?t.error:"Unknown error occurred";this.showTaskError(s)}}catch(s){console.error("Error processing task completion:",s),this.showTaskError("Error processing task result")}}),this.websocket.on("collaboration-completed",t=>{console.log("üéâ Collaboration completed:",t);const e=document.getElementById("active-task-display");e&&(e.style.display="none");try{this.showCollaborationResult(t),this.addToTaskHistory(t)}catch(s){console.error("Error processing collaboration completion:",s),this.showTaskError("Error processing collaboration result")}})}requestAIStatus(){this.websocket&&this.websocket.connected&&(console.log("üì° Requesting AI system status"),this.websocket.send("get-ai-status"))}updateAIStatus(t,e){const s=document.getElementById("ai-status-indicator"),i=document.getElementById("ai-status-text");s&&(s.className=`status-dot ${t}`),i&&(i.textContent=e)}updateSystemStatus(t){console.log("üìä System status update:",t);const e=t.totalAIAgents||0,s=document.getElementById("ai-status-text");s&&(s.textContent=`Connected (${e} agents)`),t.aiAgents&&this.updateAgentList(t.aiAgents)}updateAgentList(t){const e=document.getElementById("ai-agents-list");if(!e){console.error("Agents list element not found");return}const s=Array.isArray(t)?t:Object.values(t);e.innerHTML=s.map(i=>`
            <div class="agent-item" data-agent-id="${i.id}">
                <div class="agent-info">
                    <h5>${i.name}</h5>
                    <p class="agent-type">${i.type}</p>
                </div>
                <div class="agent-status">
                    <span class="status-dot ${i.status||"active"}"></span>
                    <span>${i.status||"active"}</span>
                </div>
            </div>
        `).join("")}addAgentToList(t){const e=document.getElementById("ai-agents-list");if(!e){console.error("Agents list element not found");return}const s=e.querySelector(`.agent-item[data-agent-id="${t.id}"]`);if(s){s.innerHTML=`
                <div class="agent-info">
                    <h5>${t.name}</h5>
                    <p class="agent-type">${t.type}</p>
                </div>
                <div class="agent-status">
                    <span class="status-dot ${t.status||"active"}"></span>
                    <span>${t.status||"active"}</span>
                </div>
            `;return}const i=document.createElement("div");i.className="agent-item",i.dataset.agentId=t.id,i.innerHTML=`
            <div class="agent-info">
                <h5>${t.name}</h5>
                <p class="agent-type">${t.type}</p>
            </div>
            <div class="agent-status">
                <span class="status-dot ${t.status||"active"}"></span>
                <span>${t.status||"active"}</span>
            </div>
        `,e.appendChild(i)}submitAITask(){console.log("Submitting AI task");const t=document.getElementById("ai-task-description").value,e=document.getElementById("task-type").value,s=parseInt(document.getElementById("task-priority").value),i=parseInt(document.getElementById("task-complexity").value),n=document.querySelectorAll('.capabilities-checkboxes input[type="checkbox"]:checked'),o=Array.from(n).map(r=>r.value);if(!t.trim()){alert("Please enter a task description");return}const a={type:e,description:t,priority:s,complexity:i,requiredCapabilities:o};if(console.log("Task data:",a),this.websocket&&this.websocket.connected){console.log("üì§ Sending task to server via WebSocket");const r=this.websocket.send("submit-ai-task",a);console.log("üì§ Task submission result:",r),this.showTaskInProgress("pending"),document.getElementById("ai-task-form").reset(),document.getElementById("complexity-value").textContent="50"}else this.websocket&&this.websocket.isDemoMode?(console.log("üì§ Sending task to server via Demo Mode"),this.websocket.send("submit-ai-task",a),this.showTaskInProgress("pending"),document.getElementById("ai-task-form").reset(),document.getElementById("complexity-value").textContent="50"):(console.error("‚ùå Not connected to server, cannot submit task"),console.log("WebSocket state:",this.websocket),this.websocket&&(console.log("Connected:",this.websocket.connected),console.log("Demo Mode:",this.websocket.isDemoMode),console.log("Connection Failed:",this.websocket.hasConnectionFailed)),this.showTaskError("Not connected to AI server. Please check your connection."),alert("Not connected to AI server. Please check your connection."))}showTaskInProgress(t){const e=document.getElementById("active-task-display"),s=document.getElementById("progress-text");e&&s&&(e.style.display="block",t==="pending"?s.textContent="Task submitted, waiting for server acknowledgment...":s.textContent=`Task ${t.substring(0,8)}... is being processed`)}showTaskResult(t){const e=document.getElementById("active-task-display"),s=document.getElementById("task-results");if(e&&(e.style.display="none"),s&&t){const i=(t.taskId||t.id||"unknown").toString(),n=t.finalResult||t.result||"No result available",o=typeof n=="object"?JSON.stringify(n,null,2):n||"No result available",a=document.createElement("div");a.className="task-result",a.innerHTML=`
                <div class="result-header">
                    <h4>Task Result</h4>
                    <span class="timestamp">${new Date().toLocaleString()}</span>
                </div>
                <div class="result-content">
                    <p><strong>Task ID:</strong> ${i.substring(0,8)}</p>
                    <p><strong>Result:</strong></p>
                    <div class="result-text">${o}</div>
                </div>
            `,s.prepend(a)}}showTaskError(t){const e=document.getElementById("active-task-display"),s=document.getElementById("task-results");if(e&&(e.style.display="none"),s){const i=t&&typeof t=="object"?t.message||JSON.stringify(t):t||"Unknown error occurred",n=document.createElement("div");n.className="task-error",n.innerHTML=`
                <div class="result-header">
                    <h4>Task Error</h4>
                    <span class="timestamp">${new Date().toLocaleString()}</span>
                </div>
                <div class="error-content">
                    <p>${i}</p>
                </div>
            `,s.prepend(n)}}updateCollaborationProgress(t){const e=document.getElementById("progress-text"),s=document.getElementById("collaboration-phases");if(e&&(e.textContent=t.message||"Processing collaboration..."),s&&t.phase){const i=document.createElement("div");i.className="phase-item",i.textContent=`${t.phase}: ${t.details||""}`,s.appendChild(i)}}showCollaborationResult(t){const e=document.getElementById("active-task-display"),s=document.getElementById("task-results");if(e&&(e.style.display="none"),s&&t){const i=(t.sessionId||t.id||"unknown").toString(),n=t.finalResult||t.result||"No result available",o=typeof n=="object"?JSON.stringify(n,null,2):n||"No result available",a=document.createElement("div");a.className="task-result collaboration-result",a.innerHTML=`
                <div class="result-header">
                    <h4>Collaboration Result</h4>
                    <span class="timestamp">${new Date().toLocaleString()}</span>
                </div>
                <div class="result-content">
                    <p><strong>Collaboration ID:</strong> ${i.substring(0,8)}</p>
                    <p><strong>Final Result:</strong></p>
                    <div class="result-text">${o}</div>
                    ${t.executionSteps?`
                    <p><strong>Execution Steps:</strong></p>
                    <ul>
                        ${Array.isArray(t.executionSteps)?t.executionSteps.map(r=>`<li>${r.agentName||"Unknown Agent"}: ${r.taskName||r.taskId||"Unknown Task"}</li>`).join(""):"<li>No execution steps available</li>"}
                    </ul>
                    `:""}
                </div>
            `,s.prepend(a)}}addToTaskHistory(t){try{if(!t||typeof t!="object"){console.warn("Invalid task data for history:",t);return}!t.taskId&&!t.id&&(t.taskId="unknown-"+Date.now()),!t.description&&!t.taskDescription&&(t.description="Unnamed Task"),this.taskHistory.unshift(t),this.taskHistory=this.taskHistory.slice(0,10),this.updateTaskHistoryDisplay()}catch(e){console.error("Error adding task to history:",e)}}updateTaskHistoryDisplay(){const t=document.getElementById("history-list");if(t){if(this.taskHistory.length===0){t.innerHTML='<div class="history-item"><p>No task history available</p></div>';return}t.innerHTML=this.taskHistory.map(e=>{try{const s=(e.taskId||e.id||"unknown").toString(),i=e.description||e.taskDescription||"Unnamed Task",n=e.finalResult||e.result||"No result available",o=typeof n=="object"?JSON.stringify(n,null,2):n||"No result available";return`
                <div class="history-item">
                    <div class="history-header">
                        <h5>${i}</h5>
                        <span class="task-type">${e.type||"Unknown"}</span>
                    </div>
                    <p class="task-meta">
                        <span>ID: ${s.substring(0,8)}</span>
                        <span>Date: ${new Date().toLocaleDateString()}</span>
                    </p>
                    <div class="task-preview">
                        ${o.substring(0,100)+(o.length>100?"...":"")}
                    </div>
                </div>
                `}catch(s){return`
                <div class="history-item">
                    <h5>Task Processing Error</h5>
                    <p class="task-meta">
                        <span>ID: unknown</span>
                        <span>Date: ${new Date().toLocaleDateString()}</span>
                    </p>
                    <div class="task-preview">
                        Error displaying task: ${s.message}
                    </div>
                </div>
                `}}).join("")}}showCreateAgentDialog(){const t=document.createElement("div");t.className="modal",t.id="agent-creation-modal",t.innerHTML=`
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Create New AI Agent</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="create-agent-form">
                        <div class="form-group">
                            <label>Agent Name:</label>
                            <input type="text" id="agent-name" required placeholder="e.g., Dr. Analyzer">
                        </div>
                        <div class="form-group">
                            <label>Agent Type:</label>
                            <select id="agent-type">
                                <option value="analyzer">Analyzer</option>
                                <option value="synthesizer">Synthesizer</option>
                                <option value="reasoner">Reasoner</option>
                                <option value="validator">Validator</option>
                                <option value="innovator">Innovator</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Capabilities (comma separated):</label>
                            <input type="text" id="agent-capabilities" placeholder="e.g., deep_analysis, pattern_recognition">
                        </div>
                        <div class="form-group">
                            <label>Personality Traits (comma separated):</label>
                            <input type="text" id="agent-personality" placeholder="e.g., analytical, detail-oriented">
                        </div>
                        <button type="submit" class="btn btn-primary">Create Agent</button>
                    </form>
                    <div id="agent-creation-error" class="error-message" style="display: none; color: #ef4444; margin-top: 15px; padding: 10px; background: rgba(239, 68, 68, 0.1); border-radius: 4px;"></div>
                </div>
            </div>
        `,document.body.appendChild(t),t.querySelector(".modal-close").addEventListener("click",()=>{this.hideCreateAgentDialog()}),document.getElementById("create-agent-form").addEventListener("submit",i=>{i.preventDefault(),this.createAIAgent()}),t.addEventListener("click",i=>{i.target===t&&this.hideCreateAgentDialog()}),this.makeModalResponsive(t)}makeModalResponsive(t){if(window.innerWidth<=768){const s=t.querySelector(".modal-content");s&&(s.style.width="95%",s.style.maxHeight="90vh",s.style.margin="5vh auto")}}hideCreateAgentDialog(){const t=document.getElementById("agent-creation-modal");t&&t.remove()}createAIAgent(){const t=document.getElementById("agent-name").value,e=document.getElementById("agent-type").value,s=document.getElementById("agent-capabilities").value.split(",").map(o=>o.trim()).filter(o=>o),i=document.getElementById("agent-personality").value.split(",").map(o=>o.trim()).filter(o=>o);if(!t){this.showAgentCreationError("Agent name is required");return}const n={name:t,type:e,capabilities:s,personality:i};console.log("Creating AI agent:",n),this.websocket&&this.websocket.connected?this.websocket.send("create-ai-agent",n):this.showAgentCreationError("Not connected to server")}showAgentCreationError(t){const e=document.getElementById("agent-creation-error");e&&(e.textContent=t,e.style.display="block")}debugFormState(){console.log("=== Form Debug Info ===");const t=document.getElementById("ai-task-description"),e=document.getElementById("ai-task-form");if(console.log({taskDescription:t,aiTaskForm:e,descriptionValue:t?t.value:"N/A",descriptionPlaceholder:t?t.placeholder:"N/A"}),e){const s=e.querySelectorAll("input, select, textarea");console.log("Form elements:",Array.from(s).map(i=>({tagName:i.tagName,id:i.id,type:i.type,name:i.name,value:i.value})))}}}document.addEventListener("DOMContentLoaded",()=>{window.realAIInterface=new b,setTimeout(()=>{window.realAIInterface&&window.realAIInterface.handleWindowResize()},100)});class w{constructor(){this.websocket=null,this.metrics={agents:[],collaborations:0,tasks:0,performance:{convergenceRate:0,avgResponseTime:0,tokenUsage:0,successRate:100},system:{memory:0,connections:0,uptime:0}},this.charts=new Map,this.activityLog=[],this.initializeDashboard(),this.connectWebSocket(),this.startMetricsUpdate(),this.simulateRealtimeUpdates()}initializeDashboard(){this.setupEventListeners(),this.initializeCharts(),setTimeout(()=>{const t=document.querySelector('.nav-btn[data-view="ai-overview"]');t&&!t.classList.contains("active")&&t.classList.add("active");const e=document.getElementById("ai-overview");e&&!e.classList.contains("active")&&e.classList.add("active")},100),this.updateDisplay()}setupEventListeners(){document.querySelectorAll(".nav-btn").forEach(t=>{t.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation();const s=e.target.dataset.view;s&&this.switchView(s)})})}switchView(t){console.log(`Switching to view: ${t}`),document.querySelectorAll(".view").forEach(i=>{i.classList.remove("active")});const e=document.getElementById(t);e?(e.classList.add("active"),console.log(`Activated view: ${t}`)):console.warn(`View not found: ${t}`),document.querySelectorAll(".nav-btn").forEach(i=>{i.classList.remove("active")});const s=document.querySelector(`[data-view="${t}"]`);s?(s.classList.add("active"),console.log(`Activated nav button for: ${t}`)):console.warn(`Nav button not found for: ${t}`),e&&(e.style.animation="fadeIn 0.3s ease")}connectWebSocket(){console.log("üîÑ Connecting to Real AI Server..."),window.app&&window.app.ws&&window.app.ws.socket?(console.log("üîó Reusing main app WebSocket connection in metrics dashboard"),this.websocket=window.app.ws,this.setupWebSocketHandlers()):(console.log("üîó Creating new WebSocket connection for metrics dashboard"),this.websocket=new h,this.websocket.connect(d.getBackendUrl()).catch(t=>{console.error("‚ùå Failed to connect to WebSocket:",t),d.shouldUseDemoMode()?(console.log("üì± Vercel deployment detected, using demo mode in metrics dashboard"),this.setupDemoMode()):this.addActivity("Connection Failed","error")}),this.setupWebSocketHandlers())}setupWebSocketHandlers(){var e;const t=this.websocket===((e=window.app)==null?void 0:e.ws);t?this.websocket.socket&&this.websocket.socket.connected?(console.log("‚úÖ Already connected to Real AI Server via main app"),this.addActivity("Connected to AI system","success"),this.websocket.send("get-ai-status")):this.websocket.isDemoMode&&(console.log("üì± Demo mode active via main app in metrics dashboard"),this.setupDemoMode()):(this.websocket.on("connect",()=>{console.log("üì° Connected to Real AI WebSocket"),this.addActivity("Connected to AI system","success"),this.requestSystemStatus()}),this.websocket.on("disconnected",s=>{console.log("‚ùå Disconnected from AI WebSocket:",s),s==="demo-mode"?this.setupDemoMode():this.addActivity("Disconnected from AI system","error")}),this.websocket.on("error",s=>{console.error("WebSocket connection error:",s),d.shouldUseDemoMode()?this.setupDemoMode():this.addActivity("WebSocket connection error","error")})),this.websocket.on("ai-system-status",s=>{this.updateSystemMetrics(s)}),this.websocket.on("ai-collaboration-update",s=>{this.updateCollaborationMetrics(s)}),this.websocket.on("ai-agent-update",s=>{this.updateAgentMetrics(s)}),this.websocket.on("demo-collaboration-completed",s=>{this.handleCollaborationComplete(s)}),this.websocket.on("network-topology-update",s=>{this.updateNetworkTopology(s)}),this.websocket.on("performance-metrics",s=>{this.updatePerformanceMetrics(s)}),this.websocket.on("collaboration-view-update",s=>{this.updateCollaborationViewMetrics(s)}),t||setTimeout(()=>{this.requestSystemStatus()},1e3)}setupDemoMode(){console.log("üì± Setting up demo mode for Metrics Dashboard"),this.addActivity("Demo Mode Active - Real AI agents not available","info"),this.demoInterval&&clearInterval(this.demoInterval),this.demoInterval=setInterval(()=>{this.updateWithDemoData()},15e3),setTimeout(()=>{this.updateWithDemoData()},1e3)}updateWithDemoData(){console.log("üì± Updating Metrics Dashboard with demo data");const t={timestamp:Date.now(),openaiApiKey:!1,totalAIAgents:5,activeCollaborations:Math.floor(Math.random()*3),totalCollaborations:12+Math.floor(Math.random()*5),connectedClients:1,aiAgents:[{id:"demo-1",name:"Prof. Smoot (Demo)",type:"cosmic_structure_expert",status:"active",energy:95,maxEnergy:100,ai:{focusLevel:.9,memoryLoad:{shortTerm:5,longTerm:42},currentThought:"Analyzing cosmic structure patterns..."}},{id:"demo-2",name:"Dr. Analyzer (Demo)",type:"analyzer",status:"processing",energy:87,maxEnergy:100,ai:{focusLevel:.7,memoryLoad:{shortTerm:8,longTerm:36},currentThought:"Processing data patterns..."}},{id:"demo-3",name:"Ms. Synthesizer (Demo)",type:"synthesizer",status:"active",energy:92,maxEnergy:100,ai:{focusLevel:.8,memoryLoad:{shortTerm:3,longTerm:28},currentThought:"Synthesizing knowledge domains..."}}],system:{memory:{heapUsed:Math.random()*50*1024*1024},uptime:Math.floor(Math.random()*3600)}};this.updateSystemMetrics(t)}requestSystemStatus(){this.websocket&&this.websocket.connected&&this.websocket.emit("get-ai-status")}updateSystemMetrics(t){var e;this.metrics.agents=t.aiAgents||[],this.metrics.collaborations=t.activeCollaborations||0,this.metrics.tasks=t.totalCollaborations||0,t.system&&(this.metrics.system.memory=((e=t.system.memory)==null?void 0:e.heapUsed)||0,this.metrics.system.uptime=t.system.uptime||0),this.metrics.system.connections=t.connectedClients||0,this.updateAPIStatus(t.openaiApiKey),this.updateStatusCards(),this.updateAgentMetricsDisplay(),this.updateResourceMeters(),this.addActivity(`System status updated: ${this.metrics.agents.length} agents active`,"info")}updateStatusCards(){const t=document.getElementById("total-agents"),e=document.getElementById("active-collaborations"),s=document.getElementById("total-tasks");t&&(t.textContent=this.metrics.agents.length),e&&(e.textContent=this.metrics.collaborations),s&&(s.textContent=this.metrics.tasks);const i=document.getElementById("agents-status"),n=document.getElementById("collab-status");i&&(i.className=`status-indicator ${this.metrics.agents.length>0?"online":"offline"}`),n&&(n.className=`status-indicator ${this.metrics.collaborations>0?"online":"offline"}`)}updateAPIStatus(t){const e=document.getElementById("api-status"),s=document.getElementById("api-indicator");e&&s&&(t?(e.textContent="Active",s.className="status-indicator success"):(e.textContent="No Key",s.className="status-indicator warning"))}updateAgentMetricsDisplay(){const t=document.getElementById("agent-metrics-container");t&&(t.innerHTML=this.metrics.agents.map(e=>{var s,i,n,o,a,r;return`
            <div class="agent-metric-card">
                <div class="agent-header">
                    <div class="agent-name">${e.name}</div>
                    <div class="agent-type">${e.type}</div>
                </div>
                
                <div class="agent-metrics">
                    <div class="metric-item">
                        <div class="label">Energy</div>
                        <div class="value">${e.energy}/${e.maxEnergy}</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Focus</div>
                        <div class="value">${(((s=e.ai)==null?void 0:s.focusLevel)*100||0).toFixed(0)}%</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Memory</div>
                        <div class="value">${((n=(i=e.ai)==null?void 0:i.memoryLoad)==null?void 0:n.shortTerm)||0}/${((a=(o=e.ai)==null?void 0:o.memoryLoad)==null?void 0:a.longTerm)||0}</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Status</div>
                        <div class="value ${e.status}">${e.status}</div>
                    </div>
                </div>
                
                ${(r=e.ai)!=null&&r.currentThought?`
                    <div class="agent-thinking">
                        "${e.ai.currentThought}"
                    </div>
                `:""}
            </div>
        `}).join(""))}updateResourceMeters(){const t=Math.round(this.metrics.system.memory/1024/1024),e=Math.min(t/100*100,100),s=document.getElementById("memory-bar"),i=document.getElementById("memory-value");s&&(s.style.width=`${e}%`),i&&(i.textContent=`${t} MB`);const n=Math.min(this.metrics.system.connections/10*100,100),o=document.getElementById("connections-bar"),a=document.getElementById("connections-value");o&&(o.style.width=`${n}%`),a&&(a.textContent=this.metrics.system.connections);const r=this.formatUptime(this.metrics.system.uptime),l=document.getElementById("uptime-value");l&&(l.textContent=r)}updateCollaborationMetrics(t){if(this.addActivity(`Collaboration session: ${t.sessionId}`,"info"),t.convergenceMetrics){this.metrics.performance.convergenceRate=t.convergenceMetrics.finalConsensus*100||0;const e=document.getElementById("convergence-rate");e&&(e.textContent=`${this.metrics.performance.convergenceRate.toFixed(0)}%`)}if(t.metadata){this.metrics.performance.tokenUsage+=t.metadata.tokensUsed||0;const e=document.getElementById("token-usage");e&&(e.textContent=this.metrics.performance.tokenUsage)}}handleCollaborationComplete(t){var s,i,n;this.addActivity(`Collaboration completed: ${t.task.type}`,"success"),this.metrics.tasks++;const e=document.getElementById("total-tasks");if(e&&(e.textContent=this.metrics.tasks),(s=t.convergenceMetrics)!=null&&s.finalConsensus){this.metrics.performance.convergenceRate=t.convergenceMetrics.finalConsensus*100;const o=document.getElementById("convergence-rate");o&&(o.textContent=`${this.metrics.performance.convergenceRate.toFixed(0)}%`)}if((i=t.metadata)!=null&&i.tokensUsed){this.metrics.performance.tokenUsage+=t.metadata.tokensUsed;const o=document.getElementById("token-usage");o&&(o.textContent=this.metrics.performance.tokenUsage)}if((n=t.metadata)!=null&&n.totalAgents&&t.sessionId){const o=Date.now()-parseInt(t.sessionId.split("_")[0]);this.metrics.performance.avgResponseTime=o;const a=document.getElementById("avg-response-time");a&&(a.textContent=`${o}ms`)}}updateNetworkTopology(t){if(t.connections){const e=document.getElementById("network-connections");e&&(e.textContent=t.connections)}if(t.stability){const e=document.getElementById("network-stability");e&&(e.textContent=`${(t.stability*100).toFixed(0)}%`)}if(t.throughput){const e=document.getElementById("throughput");e&&(e.textContent=`${t.throughput} req/s`)}if(t.clusteringCoefficient){const e=document.getElementById("clustering-coefficient");e&&(e.textContent=t.clusteringCoefficient.toFixed(2))}t.agents&&this.updateAgentPositions(t.agents),this.addActivity("Network topology updated","info")}updatePerformanceMetrics(t){if(t.cpuUsage){const e=document.getElementById("cpu-usage");e&&(e.textContent=`${t.cpuUsage.toFixed(0)}%`)}if(t.memoryUsagePercent){const e=document.getElementById("memory-usage-percent");e&&(e.textContent=`${t.memoryUsagePercent.toFixed(0)}%`)}if(t.networkLatency){const e=document.getElementById("network-latency");e&&(e.textContent=`${t.networkLatency}ms`)}if(t.processingSpeed){const e=document.getElementById("processing-speed");e&&(e.textContent=`${t.processingSpeed} ops/s`)}if(t.liveResponseTime){const e=document.getElementById("live-response-time");e&&(e.textContent=`${t.liveResponseTime}ms`)}if(t.liveTokenRate){const e=document.getElementById("live-token-rate");e&&(e.textContent=`${t.liveTokenRate}/min`)}if(t.collabEvents){const e=document.getElementById("collab-events");e&&(e.textContent=t.collabEvents)}if(t.agentActivity){const e=document.getElementById("agent-activity");e&&(e.textContent=`${(t.agentActivity*100).toFixed(0)}%`)}this.addActivity("Performance metrics updated","info")}updateCollaborationViewMetrics(t){if(t.discussionRounds){const e=document.getElementById("discussion-rounds");e&&(e.textContent=t.discussionRounds)}if(t.consensusLevel){const e=document.getElementById("consensus-level");e&&(e.textContent=`${(t.consensusLevel*100).toFixed(0)}%`)}if(t.synthesisSpeed){const e=document.getElementById("synthesis-speed");e&&(e.textContent=`${t.synthesisSpeed}ms`)}if(t.collaborationStrength){const e=document.getElementById("collaboration-strength");e&&(e.textContent=t.collaborationStrength.toFixed(1))}if(t.iterationCount){const e=document.getElementById("iteration-count");e&&(e.textContent=`${t.iterationCount}/5`)}if(t.confidenceAlignment){const e=document.getElementById("confidence-alignment");e&&(e.textContent=`${(t.confidenceAlignment*100).toFixed(0)}%`)}if(t.ideaDiversity){const e=document.getElementById("idea-diversity");e&&(e.textContent=t.ideaDiversity.toFixed(1))}if(t.synthesisQuality){const e=document.getElementById("synthesis-quality");e&&(e.textContent=`${(t.synthesisQuality*100).toFixed(0)}%`)}t.liveSessions&&this.updateLiveCollaborationSessions(t.liveSessions),t.collaborationFlow&&this.updateCollaborationFlow(t.collaborationFlow)}updateLiveCollaborationSessions(t){const e=document.getElementById("live-collaboration-sessions");e&&(e.innerHTML=t.map(s=>`
            <div class="agent-metric-card">
                <div class="agent-header">
                    <div class="agent-name">Session ${s.id.substring(0,8)}</div>
                    <div class="agent-type">${s.status}</div>
                </div>
                
                <div class="agent-metrics">
                    <div class="metric-item">
                        <div class="label">Participants</div>
                        <div class="value">${s.participants}</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Progress</div>
                        <div class="value">${s.progress}%</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Duration</div>
                        <div class="value">${s.duration}s</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Consensus</div>
                        <div class="value">${(s.consensus*100).toFixed(0)}%</div>
                    </div>
                </div>
                
                <div class="agent-thinking">
                    ${s.currentPhase}
                </div>
            </div>
        `).join(""))}updateCollaborationFlow(t){const e=document.getElementById("collaboration-flow");e&&(e.innerHTML=t.slice(0,20).map(s=>`
            <div class="activity-item slide-in">
                <div class="activity-icon ${s.type}"></div>
                <div class="activity-content">
                    <div class="activity-message">${s.message}</div>
                    <div class="activity-time">${this.formatTime(new Date(s.timestamp))}</div>
                </div>
            </div>
        `).join(""))}updateAgentPositions(t){const e=document.getElementById("agent-positions-list");e&&(e.innerHTML=t.map(s=>`
            <div class="agent-metric-card">
                <div class="agent-header">
                    <div class="agent-name">${s.name}</div>
                    <div class="agent-type">${s.type}</div>
                </div>
                
                <div class="agent-metrics">
                    <div class="metric-item">
                        <div class="label">X</div>
                        <div class="value">${s.position.x.toFixed(1)}</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Y</div>
                        <div class="value">${s.position.y.toFixed(1)}</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Z</div>
                        <div class="value">${s.position.z.toFixed(1)}</div>
                    </div>
                    
                    <div class="metric-item">
                        <div class="label">Connections</div>
                        <div class="value">${s.connections||0}</div>
                    </div>
                </div>
            </div>
        `).join(""))}addActivity(t,e="info"){const s={message:t,type:e,timestamp:new Date};this.activityLog.unshift(s),this.activityLog.length>50&&this.activityLog.pop(),this.updateActivityFeed()}updateActivityFeed(){const t=document.getElementById("activity-feed");t&&(t.innerHTML=this.activityLog.slice(0,20).map(e=>`
            <div class="activity-item slide-in">
                <div class="activity-icon ${e.type}"></div>
                <div class="activity-content">
                    <div class="activity-message">${e.message}</div>
                    <div class="activity-time">${this.formatTime(e.timestamp)}</div>
                </div>
            </div>
        `).join(""))}initializeCharts(){document.querySelectorAll(".metric-chart").forEach(e=>{e.innerHTML='<div style="width: 100%; height: 100%; background: linear-gradient(90deg, transparent 0%, rgba(16, 185, 129, 0.3) 50%, transparent 100%); border-radius: 4px;"></div>'})}startMetricsUpdate(){setInterval(()=>{this.requestSystemStatus()},5e3),setInterval(()=>{this.updateTimeBasedMetrics()},1e3)}updateTimeBasedMetrics(){if(this.metrics.system.uptime>0){this.metrics.system.uptime+=1;const t=this.formatUptime(this.metrics.system.uptime),e=document.getElementById("uptime-value");e&&(e.textContent=t)}}formatUptime(t){const e=Math.floor(t/3600),s=Math.floor(t%3600/60),i=Math.floor(t%60);return e>0?`${e}h ${s}m ${i}s`:s>0?`${s}m ${i}s`:`${i}s`}formatTime(t){return t.toLocaleTimeString()}updateDisplay(){this.updateStatusCards(),this.updateAgentMetricsDisplay(),this.updateResourceMeters(),this.updateActivityFeed()}simulateRealtimeUpdates(){setInterval(()=>{this.updateNetworkTopology({connections:Math.floor(Math.random()*20)+5,stability:.85+Math.random()*.15,throughput:Math.floor(Math.random()*100)+20,clusteringCoefficient:Math.random()*.8+.2,agents:this.generateMockAgentPositions()})},3e3),setInterval(()=>{this.updatePerformanceMetrics({cpuUsage:Math.random()*40+10,memoryUsagePercent:Math.random()*60+20,networkLatency:Math.floor(Math.random()*50)+10,processingSpeed:Math.floor(Math.random()*200)+50,liveResponseTime:Math.floor(Math.random()*1e3)+200,liveTokenRate:Math.floor(Math.random()*50)+10,collabEvents:Math.floor(Math.random()*10),agentActivity:Math.random()*.8+.2})},2e3),setInterval(()=>{this.updateCollaborationViewMetrics({discussionRounds:Math.floor(Math.random()*5)+1,consensusLevel:Math.random()*.8+.2,synthesisSpeed:Math.floor(Math.random()*500)+100,collaborationStrength:Math.random()*4+1,iterationCount:Math.floor(Math.random()*5)+1,confidenceAlignment:Math.random()*.8+.2,ideaDiversity:Math.random()*3+1,synthesisQuality:Math.random()*.8+.2,liveSessions:this.generateMockCollaborationSessions(),collaborationFlow:this.generateMockCollaborationFlow()})},4e3)}generateMockAgentPositions(){const t=["Dr. Analyzer","Prof. Reasoner","Ms. Synthesizer","Dr. Validator","Mx. Innovator"],e=["analyzer","reasoner","synthesizer","validator","innovator"];return t.map((s,i)=>({name:s,type:e[i],position:{x:(Math.random()-.5)*1e3,y:(Math.random()-.5)*1e3,z:(Math.random()-.5)*500},connections:Math.floor(Math.random()*8)+2}))}generateMockCollaborationSessions(){const t=Math.floor(Math.random()*3)+1,e=[];for(let s=0;s<t;s++)e.push({id:`session_${Date.now()}_${s}`,status:["active","converging","synthesizing"][Math.floor(Math.random()*3)],participants:Math.floor(Math.random()*4)+2,progress:Math.floor(Math.random()*80)+20,duration:Math.floor(Math.random()*120)+30,consensus:Math.random()*.6+.4,currentPhase:["Individual Analysis","Discussion Round 2","Synthesis Phase"][Math.floor(Math.random()*3)]});return e}generateMockCollaborationFlow(){const t=["success","info","warning"],e=["Agent collaboration initiated","Consensus level increased to 85%","New insight generated by Synthesizer","Validation phase completed","Discussion round 3 started","Token usage optimized","Network topology updated","Agent energy levels restored"],s=[],i=Math.floor(Math.random()*5)+3;for(let n=0;n<i;n++)s.push({type:t[Math.floor(Math.random()*t.length)],message:e[Math.floor(Math.random()*e.length)],timestamp:Date.now()-Math.random()*3e5});return s.sort((n,o)=>o.timestamp-n.timestamp)}}document.addEventListener("DOMContentLoaded",()=>{window.metricsDashboard=new w});
